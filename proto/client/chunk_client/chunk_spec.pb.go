// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: yt_proto/yt/client/chunk_client/proto/chunk_spec.proto

package chunk_client

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	misc "github.com/go-faster/yt/proto/core/misc"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes a portion of table chunk.
type TChunkSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// COMPAT(babenko)
	// The way these fields are used is quite chaotic. Possible encodings are as follows:
	// 1) chunk_id is the actual chunk id, others are not used (for static tables only);
	// 2) chunk_id is a tablet id, cell_id is the id of the cell hosting this tablet (for queries);
	// 3) chunk_id is a dynamic store id, tablet_id is the id of the tablet containing this store, and
	//    cell_id is the id of the cell hosting this tablet (for dynamic store reads).
	// In all cases, cell_id could be missing (for legacy clients).
	ChunkId  *misc.TGuid `protobuf:"bytes,1,req,name=chunk_id,json=chunkId" json:"chunk_id,omitempty"`
	TabletId *misc.TGuid `protobuf:"bytes,20,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	CellId   *misc.TGuid `protobuf:"bytes,22,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	// Lower boundary, inclusive.
	LowerLimit *TReadLimit `protobuf:"bytes,2,opt,name=lower_limit,json=lowerLimit" json:"lower_limit,omitempty"`
	// Upper boundary, exclusive.
	UpperLimit *TReadLimit `protobuf:"bytes,3,opt,name=upper_limit,json=upperLimit" json:"upper_limit,omitempty"`
	// Initial seed addresses. The reader may ask the master for additional ones.
	Replicas      []uint32 `protobuf:"fixed32,4,rep,name=replicas" json:"replicas,omitempty"`
	TableIndex    *int32   `protobuf:"varint,7,opt,name=table_index,json=tableIndex,def=0" json:"table_index,omitempty"`
	ErasureCodec  *int32   `protobuf:"varint,9,opt,name=erasure_codec,json=erasureCodec,def=0" json:"erasure_codec,omitempty"`
	TableRowIndex *int64   `protobuf:"varint,10,opt,name=table_row_index,json=tableRowIndex,def=0" json:"table_row_index,omitempty"`
	// Chunk meta can be omitted for intermediate chunks.
	ChunkMeta *TChunkMeta `protobuf:"bytes,11,opt,name=chunk_meta,json=chunkMeta" json:"chunk_meta,omitempty"`
	// Only makes sense as a part of data split.
	Timestamp *uint64 `protobuf:"varint,12,opt,name=timestamp" json:"timestamp,omitempty"`
	// Mapping to ranges.
	RangeIndex *int32 `protobuf:"varint,13,opt,name=range_index,json=rangeIndex" json:"range_index,omitempty"`
	// Overrides the corresponding values in TMiscExt.
	RowCountOverride   *int64 `protobuf:"varint,14,opt,name=row_count_override,json=rowCountOverride" json:"row_count_override,omitempty"`
	DataWeightOverride *int64 `protobuf:"varint,15,opt,name=data_weight_override,json=dataWeightOverride" json:"data_weight_override,omitempty"`
	// Tag of the input data slice this chunk spec belongs to (if any).
	// It helps us restore the correspondence between data slices that
	// form the job input and the unread data slices returned as a
	// job interruption result.
	DataSliceTag *int64 `protobuf:"varint,16,opt,name=data_slice_tag,json=dataSliceTag" json:"data_slice_tag,omitempty"`
	// Global chunk index for the operation. Helps to identify chunk_spec
	// if fetch returns the same chunk with different limits
	// (e.g. the chunk is shared between dynamic table tablets).
	ChunkIndex *int64 `protobuf:"varint,17,opt,name=chunk_index,json=chunkIndex" json:"chunk_index,omitempty"`
	// If set, all values should be treated as having this timestamp, regardless of
	// what is written at chunk meta or versioned values.
	// May be set by some chunk view.
	OverrideTimestamp *uint64 `protobuf:"varint,18,opt,name=override_timestamp,json=overrideTimestamp" json:"override_timestamp,omitempty"`
	// Denotes that all values with timestamps strictly greater than this timestamp
	// should not be read. May be set by some chunk view.
	MaxClipTimestamp *uint64 `protobuf:"varint,23,opt,name=max_clip_timestamp,json=maxClipTimestamp" json:"max_clip_timestamp,omitempty"`
	TabletIndex      *int32  `protobuf:"varint,19,opt,name=tablet_index,json=tabletIndex" json:"tablet_index,omitempty"`
	// True if row_index upper/lower_limit is absolute (table-wise or tablet-wise)
	// rather than relative (chunk-wise).
	RowIndexIsAbsolute *bool `protobuf:"varint,21,opt,name=row_index_is_absolute,json=rowIndexIsAbsolute,def=0" json:"row_index_is_absolute,omitempty"`
	StripedErasure     *bool `protobuf:"varint,24,opt,name=striped_erasure,json=stripedErasure" json:"striped_erasure,omitempty"`
}

// Default values for TChunkSpec fields.
const (
	Default_TChunkSpec_TableIndex         = int32(0)
	Default_TChunkSpec_ErasureCodec       = int32(0)
	Default_TChunkSpec_TableRowIndex      = int64(0)
	Default_TChunkSpec_RowIndexIsAbsolute = bool(false)
)

func (x *TChunkSpec) Reset() {
	*x = TChunkSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TChunkSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TChunkSpec) ProtoMessage() {}

func (x *TChunkSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TChunkSpec.ProtoReflect.Descriptor instead.
func (*TChunkSpec) Descriptor() ([]byte, []int) {
	return file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_rawDescGZIP(), []int{0}
}

func (x *TChunkSpec) GetChunkId() *misc.TGuid {
	if x != nil {
		return x.ChunkId
	}
	return nil
}

func (x *TChunkSpec) GetTabletId() *misc.TGuid {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *TChunkSpec) GetCellId() *misc.TGuid {
	if x != nil {
		return x.CellId
	}
	return nil
}

func (x *TChunkSpec) GetLowerLimit() *TReadLimit {
	if x != nil {
		return x.LowerLimit
	}
	return nil
}

func (x *TChunkSpec) GetUpperLimit() *TReadLimit {
	if x != nil {
		return x.UpperLimit
	}
	return nil
}

func (x *TChunkSpec) GetReplicas() []uint32 {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *TChunkSpec) GetTableIndex() int32 {
	if x != nil && x.TableIndex != nil {
		return *x.TableIndex
	}
	return Default_TChunkSpec_TableIndex
}

func (x *TChunkSpec) GetErasureCodec() int32 {
	if x != nil && x.ErasureCodec != nil {
		return *x.ErasureCodec
	}
	return Default_TChunkSpec_ErasureCodec
}

func (x *TChunkSpec) GetTableRowIndex() int64 {
	if x != nil && x.TableRowIndex != nil {
		return *x.TableRowIndex
	}
	return Default_TChunkSpec_TableRowIndex
}

func (x *TChunkSpec) GetChunkMeta() *TChunkMeta {
	if x != nil {
		return x.ChunkMeta
	}
	return nil
}

func (x *TChunkSpec) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *TChunkSpec) GetRangeIndex() int32 {
	if x != nil && x.RangeIndex != nil {
		return *x.RangeIndex
	}
	return 0
}

func (x *TChunkSpec) GetRowCountOverride() int64 {
	if x != nil && x.RowCountOverride != nil {
		return *x.RowCountOverride
	}
	return 0
}

func (x *TChunkSpec) GetDataWeightOverride() int64 {
	if x != nil && x.DataWeightOverride != nil {
		return *x.DataWeightOverride
	}
	return 0
}

func (x *TChunkSpec) GetDataSliceTag() int64 {
	if x != nil && x.DataSliceTag != nil {
		return *x.DataSliceTag
	}
	return 0
}

func (x *TChunkSpec) GetChunkIndex() int64 {
	if x != nil && x.ChunkIndex != nil {
		return *x.ChunkIndex
	}
	return 0
}

func (x *TChunkSpec) GetOverrideTimestamp() uint64 {
	if x != nil && x.OverrideTimestamp != nil {
		return *x.OverrideTimestamp
	}
	return 0
}

func (x *TChunkSpec) GetMaxClipTimestamp() uint64 {
	if x != nil && x.MaxClipTimestamp != nil {
		return *x.MaxClipTimestamp
	}
	return 0
}

func (x *TChunkSpec) GetTabletIndex() int32 {
	if x != nil && x.TabletIndex != nil {
		return *x.TabletIndex
	}
	return 0
}

func (x *TChunkSpec) GetRowIndexIsAbsolute() bool {
	if x != nil && x.RowIndexIsAbsolute != nil {
		return *x.RowIndexIsAbsolute
	}
	return Default_TChunkSpec_RowIndexIsAbsolute
}

func (x *TChunkSpec) GetStripedErasure() bool {
	if x != nil && x.StripedErasure != nil {
		return *x.StripedErasure
	}
	return false
}

var File_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto protoreflect.FileDescriptor

var file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_rawDesc = []byte{
	0x0a, 0x36, 0x79, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x74, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x26, 0x79, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x74, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x69, 0x73, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x75, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x79, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x36, 0x79, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x74, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x07, 0x0a, 0x0a, 0x54, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4e, 0x59, 0x54,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x47, 0x75, 0x69, 0x64, 0x52, 0x07, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4e, 0x59, 0x54, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x47, 0x75, 0x69, 0x64, 0x52, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x47, 0x75, 0x69, 0x64, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0a, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x07,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x22, 0x0a, 0x0b, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x01, 0x30, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26,
	0x0a, 0x0d, 0x65, 0x72, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x65, 0x72, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x3a,
	0x01, 0x30, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x12, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x69, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x15, 0x72,
	0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x12, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x73, 0x41, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x64,
	0x5f, 0x65, 0x72, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x64, 0x45, 0x72, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4a, 0x04,
	0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09,
	0x42, 0x2f, 0x5a, 0x2d, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2e, 0x74, 0x65, 0x63,
	0x68, 0x2f, 0x79, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74,
}

var (
	file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_rawDescOnce sync.Once
	file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_rawDescData = file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_rawDesc
)

func file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_rawDescGZIP() []byte {
	file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_rawDescOnce.Do(func() {
		file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_rawDescData)
	})
	return file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_rawDescData
}

var file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_goTypes = []interface{}{
	(*TChunkSpec)(nil), // 0: NYT.NChunkClient.NProto.TChunkSpec
	(*misc.TGuid)(nil), // 1: NYT.NProto.TGuid
	(*TReadLimit)(nil), // 2: NYT.NChunkClient.NProto.TReadLimit
	(*TChunkMeta)(nil), // 3: NYT.NChunkClient.NProto.TChunkMeta
}
var file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_depIdxs = []int32{
	1, // 0: NYT.NChunkClient.NProto.TChunkSpec.chunk_id:type_name -> NYT.NProto.TGuid
	1, // 1: NYT.NChunkClient.NProto.TChunkSpec.tablet_id:type_name -> NYT.NProto.TGuid
	1, // 2: NYT.NChunkClient.NProto.TChunkSpec.cell_id:type_name -> NYT.NProto.TGuid
	2, // 3: NYT.NChunkClient.NProto.TChunkSpec.lower_limit:type_name -> NYT.NChunkClient.NProto.TReadLimit
	2, // 4: NYT.NChunkClient.NProto.TChunkSpec.upper_limit:type_name -> NYT.NChunkClient.NProto.TReadLimit
	3, // 5: NYT.NChunkClient.NProto.TChunkSpec.chunk_meta:type_name -> NYT.NChunkClient.NProto.TChunkMeta
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_init() }
func file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_init() {
	if File_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto != nil {
		return
	}
	file_yt_proto_yt_client_chunk_client_proto_read_limit_proto_init()
	file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TChunkSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_goTypes,
		DependencyIndexes: file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_depIdxs,
		MessageInfos:      file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_msgTypes,
	}.Build()
	File_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto = out.File
	file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_rawDesc = nil
	file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_goTypes = nil
	file_yt_proto_yt_client_chunk_client_proto_chunk_spec_proto_depIdxs = nil
}
