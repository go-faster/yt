// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: yt_proto/yt/client/chunk_client/proto/chunk_meta.proto

package chunk_client

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	misc "github.com/go-faster/yt/proto/core/misc"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TBlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset   *int64  `protobuf:"varint,1,req,name=offset" json:"offset,omitempty"`
	Size     *int64  `protobuf:"varint,2,req,name=size" json:"size,omitempty"`
	Checksum *uint64 `protobuf:"varint,3,req,name=checksum" json:"checksum,omitempty"`
}

func (x *TBlockInfo) Reset() {
	*x = TBlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TBlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBlockInfo) ProtoMessage() {}

func (x *TBlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBlockInfo.ProtoReflect.Descriptor instead.
func (*TBlockInfo) Descriptor() ([]byte, []int) {
	return file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDescGZIP(), []int{0}
}

func (x *TBlockInfo) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *TBlockInfo) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *TBlockInfo) GetChecksum() uint64 {
	if x != nil && x.Checksum != nil {
		return *x.Checksum
	}
	return 0
}

// Chunk meta extension.
type TBlocksExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Addresses both data and system blocks.
	Blocks []*TBlockInfo `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
	// Whether chunk was written with `sync_on_close` option.
	SyncOnClose *bool `protobuf:"varint,2,opt,name=sync_on_close,json=syncOnClose,def=1" json:"sync_on_close,omitempty"`
}

// Default values for TBlocksExt fields.
const (
	Default_TBlocksExt_SyncOnClose = bool(true)
)

func (x *TBlocksExt) Reset() {
	*x = TBlocksExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TBlocksExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBlocksExt) ProtoMessage() {}

func (x *TBlocksExt) ProtoReflect() protoreflect.Message {
	mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBlocksExt.ProtoReflect.Descriptor instead.
func (*TBlocksExt) Descriptor() ([]byte, []int) {
	return file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDescGZIP(), []int{1}
}

func (x *TBlocksExt) GetBlocks() []*TBlockInfo {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *TBlocksExt) GetSyncOnClose() bool {
	if x != nil && x.SyncOnClose != nil {
		return *x.SyncOnClose
	}
	return Default_TBlocksExt_SyncOnClose
}

// Chunk meta extension.
type TMiscExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total size of uncompressed blocks.
	UncompressedDataSize *int64 `protobuf:"varint,1,opt,name=uncompressed_data_size,json=uncompressedDataSize,def=0" json:"uncompressed_data_size,omitempty"`
	// Total size of blocks with data sent to holder.
	CompressedDataSize *int64 `protobuf:"varint,5,opt,name=compressed_data_size,json=compressedDataSize,def=0" json:"compressed_data_size,omitempty"`
	// Total size of (key column names + values + 1) in each row.
	// Must be greater than zero.
	DataWeight *int64 `protobuf:"varint,7,opt,name=data_weight,json=dataWeight,def=1" json:"data_weight,omitempty"`
	// Size of chunk meta (without TMiscExt), obtained via ByteSize.
	MetaSize *int64 `protobuf:"varint,6,opt,name=meta_size,json=metaSize,def=0" json:"meta_size,omitempty"`
	// Number of rows in this chunk (tables and journals only).
	RowCount *int64 `protobuf:"varint,2,opt,name=row_count,json=rowCount,def=0" json:"row_count,omitempty"`
	// ECompressionCodec
	CompressionCodec *int32 `protobuf:"varint,3,opt,name=compression_codec,json=compressionCodec,def=0" json:"compression_codec,omitempty"`
	// Indicates if the chunk contains a sorted rowset (tables only).
	Sorted *bool `protobuf:"varint,4,opt,name=sorted,def=0" json:"sorted,omitempty"`
	// Number of key-value pairs across all rows in the chunk.
	ValueCount *int64 `protobuf:"varint,8,opt,name=value_count,json=valueCount,def=0" json:"value_count,omitempty"`
	// Uncompressed size of the largest data block.
	MaxDataBlockSize *int64 `protobuf:"varint,9,opt,name=max_data_block_size,json=maxDataBlockSize,def=0" json:"max_data_block_size,omitempty"`
	// Min/max timestamps for versioned table chunks.
	MinTimestamp *uint64 `protobuf:"varint,10,opt,name=min_timestamp,json=minTimestamp,def=0" json:"min_timestamp,omitempty"`
	MaxTimestamp *uint64 `protobuf:"varint,11,opt,name=max_timestamp,json=maxTimestamp,def=0" json:"max_timestamp,omitempty"`
	// Is the chunk sealed (journals only)?
	Sealed *bool `protobuf:"varint,13,opt,name=sealed" json:"sealed,omitempty"`
	// For overlayed journal chunks, contains the journal-wide index of the first row.
	FirstOverlayedRowIndex *int64 `protobuf:"varint,19,opt,name=first_overlayed_row_index,json=firstOverlayedRowIndex,def=0" json:"first_overlayed_row_index,omitempty"`
	// Does this chunk belong to Eden (dynamic tables only)?
	Eden *bool `protobuf:"varint,14,opt,name=eden,def=0" json:"eden,omitempty"`
	// EErasureCodec
	ErasureCodec *int32 `protobuf:"varint,15,opt,name=erasure_codec,json=erasureCodec" json:"erasure_codec,omitempty"`
	// Indicates if the chunk contains a sorted rowset with unique keys (tables only).
	UniqueKeys *bool `protobuf:"varint,16,opt,name=unique_keys,json=uniqueKeys,def=0" json:"unique_keys,omitempty"`
	// Chunk creation time.
	CreationTime *uint64 `protobuf:"varint,17,opt,name=creation_time,json=creationTime,def=0" json:"creation_time,omitempty"`
	// When set, data nodes allow downloading this chunk by HTTP.
	SharedToSkynet *bool `protobuf:"varint,18,opt,name=shared_to_skynet,json=sharedToSkynet,def=0" json:"shared_to_skynet,omitempty"`
	// System blocks contain internal information (e.g. chunk index).
	SystemBlockCount *int32 `protobuf:"varint,21,opt,name=system_block_count,json=systemBlockCount" json:"system_block_count,omitempty"`
	// Is it a striped erasure chunk?
	StripedErasure *bool `protobuf:"varint,22,opt,name=striped_erasure,json=stripedErasure" json:"striped_erasure,omitempty"`
	// If present, is used by corresponding block reader to distinguish between block versions.
	BlockFormatVersion *int32 `protobuf:"varint,23,opt,name=block_format_version,json=blockFormatVersion" json:"block_format_version,omitempty"`
}

// Default values for TMiscExt fields.
const (
	Default_TMiscExt_UncompressedDataSize   = int64(0)
	Default_TMiscExt_CompressedDataSize     = int64(0)
	Default_TMiscExt_DataWeight             = int64(1)
	Default_TMiscExt_MetaSize               = int64(0)
	Default_TMiscExt_RowCount               = int64(0)
	Default_TMiscExt_CompressionCodec       = int32(0)
	Default_TMiscExt_Sorted                 = bool(false)
	Default_TMiscExt_ValueCount             = int64(0)
	Default_TMiscExt_MaxDataBlockSize       = int64(0)
	Default_TMiscExt_MinTimestamp           = uint64(0)
	Default_TMiscExt_MaxTimestamp           = uint64(0)
	Default_TMiscExt_FirstOverlayedRowIndex = int64(0)
	Default_TMiscExt_Eden                   = bool(false)
	Default_TMiscExt_UniqueKeys             = bool(false)
	Default_TMiscExt_CreationTime           = uint64(0)
	Default_TMiscExt_SharedToSkynet         = bool(false)
)

func (x *TMiscExt) Reset() {
	*x = TMiscExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMiscExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMiscExt) ProtoMessage() {}

func (x *TMiscExt) ProtoReflect() protoreflect.Message {
	mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMiscExt.ProtoReflect.Descriptor instead.
func (*TMiscExt) Descriptor() ([]byte, []int) {
	return file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDescGZIP(), []int{2}
}

func (x *TMiscExt) GetUncompressedDataSize() int64 {
	if x != nil && x.UncompressedDataSize != nil {
		return *x.UncompressedDataSize
	}
	return Default_TMiscExt_UncompressedDataSize
}

func (x *TMiscExt) GetCompressedDataSize() int64 {
	if x != nil && x.CompressedDataSize != nil {
		return *x.CompressedDataSize
	}
	return Default_TMiscExt_CompressedDataSize
}

func (x *TMiscExt) GetDataWeight() int64 {
	if x != nil && x.DataWeight != nil {
		return *x.DataWeight
	}
	return Default_TMiscExt_DataWeight
}

func (x *TMiscExt) GetMetaSize() int64 {
	if x != nil && x.MetaSize != nil {
		return *x.MetaSize
	}
	return Default_TMiscExt_MetaSize
}

func (x *TMiscExt) GetRowCount() int64 {
	if x != nil && x.RowCount != nil {
		return *x.RowCount
	}
	return Default_TMiscExt_RowCount
}

func (x *TMiscExt) GetCompressionCodec() int32 {
	if x != nil && x.CompressionCodec != nil {
		return *x.CompressionCodec
	}
	return Default_TMiscExt_CompressionCodec
}

func (x *TMiscExt) GetSorted() bool {
	if x != nil && x.Sorted != nil {
		return *x.Sorted
	}
	return Default_TMiscExt_Sorted
}

func (x *TMiscExt) GetValueCount() int64 {
	if x != nil && x.ValueCount != nil {
		return *x.ValueCount
	}
	return Default_TMiscExt_ValueCount
}

func (x *TMiscExt) GetMaxDataBlockSize() int64 {
	if x != nil && x.MaxDataBlockSize != nil {
		return *x.MaxDataBlockSize
	}
	return Default_TMiscExt_MaxDataBlockSize
}

func (x *TMiscExt) GetMinTimestamp() uint64 {
	if x != nil && x.MinTimestamp != nil {
		return *x.MinTimestamp
	}
	return Default_TMiscExt_MinTimestamp
}

func (x *TMiscExt) GetMaxTimestamp() uint64 {
	if x != nil && x.MaxTimestamp != nil {
		return *x.MaxTimestamp
	}
	return Default_TMiscExt_MaxTimestamp
}

func (x *TMiscExt) GetSealed() bool {
	if x != nil && x.Sealed != nil {
		return *x.Sealed
	}
	return false
}

func (x *TMiscExt) GetFirstOverlayedRowIndex() int64 {
	if x != nil && x.FirstOverlayedRowIndex != nil {
		return *x.FirstOverlayedRowIndex
	}
	return Default_TMiscExt_FirstOverlayedRowIndex
}

func (x *TMiscExt) GetEden() bool {
	if x != nil && x.Eden != nil {
		return *x.Eden
	}
	return Default_TMiscExt_Eden
}

func (x *TMiscExt) GetErasureCodec() int32 {
	if x != nil && x.ErasureCodec != nil {
		return *x.ErasureCodec
	}
	return 0
}

func (x *TMiscExt) GetUniqueKeys() bool {
	if x != nil && x.UniqueKeys != nil {
		return *x.UniqueKeys
	}
	return Default_TMiscExt_UniqueKeys
}

func (x *TMiscExt) GetCreationTime() uint64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return Default_TMiscExt_CreationTime
}

func (x *TMiscExt) GetSharedToSkynet() bool {
	if x != nil && x.SharedToSkynet != nil {
		return *x.SharedToSkynet
	}
	return Default_TMiscExt_SharedToSkynet
}

func (x *TMiscExt) GetSystemBlockCount() int32 {
	if x != nil && x.SystemBlockCount != nil {
		return *x.SystemBlockCount
	}
	return 0
}

func (x *TMiscExt) GetStripedErasure() bool {
	if x != nil && x.StripedErasure != nil {
		return *x.StripedErasure
	}
	return false
}

func (x *TMiscExt) GetBlockFormatVersion() int32 {
	if x != nil && x.BlockFormatVersion != nil {
		return *x.BlockFormatVersion
	}
	return 0
}

type TPartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chunk-wide indexes of starting blocks of the stripes of a part.
	FirstBlockIndexPerStripe []int32 `protobuf:"varint,1,rep,name=first_block_index_per_stripe,json=firstBlockIndexPerStripe" json:"first_block_index_per_stripe,omitempty"`
	// Block sizes.
	BlockSizes []int64 `protobuf:"varint,2,rep,name=block_sizes,json=blockSizes" json:"block_sizes,omitempty"`
}

func (x *TPartInfo) Reset() {
	*x = TPartInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPartInfo) ProtoMessage() {}

func (x *TPartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPartInfo.ProtoReflect.Descriptor instead.
func (*TPartInfo) Descriptor() ([]byte, []int) {
	return file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDescGZIP(), []int{3}
}

func (x *TPartInfo) GetFirstBlockIndexPerStripe() []int32 {
	if x != nil {
		return x.FirstBlockIndexPerStripe
	}
	return nil
}

func (x *TPartInfo) GetBlockSizes() []int64 {
	if x != nil {
		return x.BlockSizes
	}
	return nil
}

// Chunk meta extension.
type TErasurePlacementExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartInfos       []*TPartInfo `protobuf:"bytes,1,rep,name=part_infos,json=partInfos" json:"part_infos,omitempty"`
	ParityPartCount *int32       `protobuf:"varint,2,req,name=parity_part_count,json=parityPartCount" json:"parity_part_count,omitempty"`
	ParityBlockSize *int64       `protobuf:"varint,4,req,name=parity_block_size,json=parityBlockSize" json:"parity_block_size,omitempty"`
	// Parity block count for each stripe of a part.
	ParityBlockCountPerStripe []int32 `protobuf:"varint,3,rep,name=parity_block_count_per_stripe,json=parityBlockCountPerStripe" json:"parity_block_count_per_stripe,omitempty"`
	// Last parity block size for each stripe of a part.
	ParityLastBlockSizePerStripe []int64 `protobuf:"varint,5,rep,name=parity_last_block_size_per_stripe,json=parityLastBlockSizePerStripe" json:"parity_last_block_size_per_stripe,omitempty"`
	// We cannot store checksums in TPartInfo,
	// since part infos are present only for non-empty data parts.
	PartChecksums  []uint64 `protobuf:"fixed64,6,rep,name=part_checksums,json=partChecksums" json:"part_checksums,omitempty"`
	BlockChecksums []uint64 `protobuf:"fixed64,7,rep,name=block_checksums,json=blockChecksums" json:"block_checksums,omitempty"`
}

func (x *TErasurePlacementExt) Reset() {
	*x = TErasurePlacementExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TErasurePlacementExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TErasurePlacementExt) ProtoMessage() {}

func (x *TErasurePlacementExt) ProtoReflect() protoreflect.Message {
	mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TErasurePlacementExt.ProtoReflect.Descriptor instead.
func (*TErasurePlacementExt) Descriptor() ([]byte, []int) {
	return file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDescGZIP(), []int{4}
}

func (x *TErasurePlacementExt) GetPartInfos() []*TPartInfo {
	if x != nil {
		return x.PartInfos
	}
	return nil
}

func (x *TErasurePlacementExt) GetParityPartCount() int32 {
	if x != nil && x.ParityPartCount != nil {
		return *x.ParityPartCount
	}
	return 0
}

func (x *TErasurePlacementExt) GetParityBlockSize() int64 {
	if x != nil && x.ParityBlockSize != nil {
		return *x.ParityBlockSize
	}
	return 0
}

func (x *TErasurePlacementExt) GetParityBlockCountPerStripe() []int32 {
	if x != nil {
		return x.ParityBlockCountPerStripe
	}
	return nil
}

func (x *TErasurePlacementExt) GetParityLastBlockSizePerStripe() []int64 {
	if x != nil {
		return x.ParityLastBlockSizePerStripe
	}
	return nil
}

func (x *TErasurePlacementExt) GetPartChecksums() []uint64 {
	if x != nil {
		return x.PartChecksums
	}
	return nil
}

func (x *TErasurePlacementExt) GetBlockChecksums() []uint64 {
	if x != nil {
		return x.BlockChecksums
	}
	return nil
}

// Chunk meta extension.
type TStripedErasurePlacementExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartInfos []*TStripedErasurePlacementExt_TPartInfo `protobuf:"bytes,1,rep,name=part_infos,json=partInfos" json:"part_infos,omitempty"`
	// Numbers of blocks in segments.
	SegmentBlockCounts []int32 `protobuf:"varint,2,rep,name=segment_block_counts,json=segmentBlockCounts" json:"segment_block_counts,omitempty"`
	// Sizes of the original blocks.
	BlockSizes []int64 `protobuf:"varint,3,rep,name=block_sizes,json=blockSizes" json:"block_sizes,omitempty"`
	// Some of the input blocks can be padded to fit into the segment.
	BlockPaddingSizes []int64 `protobuf:"varint,5,rep,name=block_padding_sizes,json=blockPaddingSizes" json:"block_padding_sizes,omitempty"`
	// Checksums of the original blocks.
	BlockChecksums []uint64 `protobuf:"fixed64,4,rep,name=block_checksums,json=blockChecksums" json:"block_checksums,omitempty"`
}

func (x *TStripedErasurePlacementExt) Reset() {
	*x = TStripedErasurePlacementExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TStripedErasurePlacementExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TStripedErasurePlacementExt) ProtoMessage() {}

func (x *TStripedErasurePlacementExt) ProtoReflect() protoreflect.Message {
	mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TStripedErasurePlacementExt.ProtoReflect.Descriptor instead.
func (*TStripedErasurePlacementExt) Descriptor() ([]byte, []int) {
	return file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDescGZIP(), []int{5}
}

func (x *TStripedErasurePlacementExt) GetPartInfos() []*TStripedErasurePlacementExt_TPartInfo {
	if x != nil {
		return x.PartInfos
	}
	return nil
}

func (x *TStripedErasurePlacementExt) GetSegmentBlockCounts() []int32 {
	if x != nil {
		return x.SegmentBlockCounts
	}
	return nil
}

func (x *TStripedErasurePlacementExt) GetBlockSizes() []int64 {
	if x != nil {
		return x.BlockSizes
	}
	return nil
}

func (x *TStripedErasurePlacementExt) GetBlockPaddingSizes() []int64 {
	if x != nil {
		return x.BlockPaddingSizes
	}
	return nil
}

func (x *TStripedErasurePlacementExt) GetBlockChecksums() []uint64 {
	if x != nil {
		return x.BlockChecksums
	}
	return nil
}

// TChunkMeta is stored in *.meta files on data nodes
// and passed around (possibly with a different extension subset).
type TChunkMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type (EChunkType) of data stored in this chunk (e.g. tabular, file blob etc).
	Type *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	// Format (EChunkFormat) validated by reader.
	Format *int32 `protobuf:"varint,3,req,name=format" json:"format,omitempty"`
	// EChunkFeatures bitmask of the features that are used in this chunk.
	// Chunk reader validates that it supports all the chunk's features.
	Features   *uint64             `protobuf:"varint,4,opt,name=features" json:"features,omitempty"`
	Extensions *misc.TExtensionSet `protobuf:"bytes,2,req,name=extensions" json:"extensions,omitempty"`
}

func (x *TChunkMeta) Reset() {
	*x = TChunkMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TChunkMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TChunkMeta) ProtoMessage() {}

func (x *TChunkMeta) ProtoReflect() protoreflect.Message {
	mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TChunkMeta.ProtoReflect.Descriptor instead.
func (*TChunkMeta) Descriptor() ([]byte, []int) {
	return file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDescGZIP(), []int{6}
}

func (x *TChunkMeta) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *TChunkMeta) GetFormat() int32 {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return 0
}

func (x *TChunkMeta) GetFeatures() uint64 {
	if x != nil && x.Features != nil {
		return *x.Features
	}
	return 0
}

func (x *TChunkMeta) GetExtensions() *misc.TExtensionSet {
	if x != nil {
		return x.Extensions
	}
	return nil
}

type TStripedErasurePlacementExt_TPartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sizes of segments in given part.
	SegmentSizes []int64 `protobuf:"varint,1,rep,name=segment_sizes,json=segmentSizes" json:"segment_sizes,omitempty"`
	// Checksums of segments in given part.
	SegmentChecksums []uint64 `protobuf:"fixed64,2,rep,name=segment_checksums,json=segmentChecksums" json:"segment_checksums,omitempty"`
}

func (x *TStripedErasurePlacementExt_TPartInfo) Reset() {
	*x = TStripedErasurePlacementExt_TPartInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TStripedErasurePlacementExt_TPartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TStripedErasurePlacementExt_TPartInfo) ProtoMessage() {}

func (x *TStripedErasurePlacementExt_TPartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TStripedErasurePlacementExt_TPartInfo.ProtoReflect.Descriptor instead.
func (*TStripedErasurePlacementExt_TPartInfo) Descriptor() ([]byte, []int) {
	return file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDescGZIP(), []int{5, 0}
}

func (x *TStripedErasurePlacementExt_TPartInfo) GetSegmentSizes() []int64 {
	if x != nil {
		return x.SegmentSizes
	}
	return nil
}

func (x *TStripedErasurePlacementExt_TPartInfo) GetSegmentChecksums() []uint64 {
	if x != nil {
		return x.SegmentChecksums
	}
	return nil
}

var File_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto protoreflect.FileDescriptor

var file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDesc = []byte{
	0x0a, 0x36, 0x79, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x74, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x32, 0x79, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x74, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x69, 0x73, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x0a, 0x54, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x73, 0x0a, 0x0a, 0x54,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4e, 0x59, 0x54, 0x2e,
	0x4e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f,
	0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x22, 0xf7, 0x06, 0x0a, 0x08, 0x54, 0x4d, 0x69, 0x73, 0x63, 0x45, 0x78, 0x74, 0x12, 0x37, 0x0a,
	0x16, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30,
	0x52, 0x14, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x3a, 0x01, 0x31, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1e, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12,
	0x1d, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x3a,
	0x01, 0x30, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0c,
	0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x19,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x3a,
	0x01, 0x30, 0x52, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x04, 0x65, 0x64,
	0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x04, 0x65, 0x64, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x72,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0b, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x26, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x10, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6b, 0x79, 0x6e, 0x65, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x6b, 0x79, 0x6e, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x72,
	0x69, 0x70, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x64, 0x45, 0x72, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x22, 0x6c, 0x0a, 0x09, 0x54, 0x50,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x1c, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x18, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x22, 0x8c, 0x03, 0x0a, 0x14, 0x54, 0x45, 0x72,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78,
	0x74, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x1d,
	0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x19, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x12, 0x47,
	0x0a, 0x21, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1c, 0x70, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x06, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x73, 0x22, 0x87, 0x03, 0x0a, 0x1b, 0x54, 0x53, 0x74, 0x72,
	0x69, 0x70, 0x65, 0x64, 0x45, 0x72, 0x61, 0x73, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x12, 0x5d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x4e, 0x59,
	0x54, 0x2e, 0x4e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x64, 0x45, 0x72,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78,
	0x74, 0x2e, 0x54, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x06, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x73, 0x1a, 0x5d, 0x0a, 0x09, 0x54, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x06, 0x52,
	0x10, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0a, 0x54, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e,
	0x59, 0x54, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x2f, 0x5a, 0x2d, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2e,
	0x74, 0x65, 0x63, 0x68, 0x2f, 0x79, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74,
}

var (
	file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDescOnce sync.Once
	file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDescData = file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDesc
)

func file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDescGZIP() []byte {
	file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDescOnce.Do(func() {
		file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDescData = protoimpl.X.CompressGZIP(file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDescData)
	})
	return file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDescData
}

var file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_goTypes = []interface{}{
	(*TBlockInfo)(nil),                            // 0: NYT.NChunkClient.NProto.TBlockInfo
	(*TBlocksExt)(nil),                            // 1: NYT.NChunkClient.NProto.TBlocksExt
	(*TMiscExt)(nil),                              // 2: NYT.NChunkClient.NProto.TMiscExt
	(*TPartInfo)(nil),                             // 3: NYT.NChunkClient.NProto.TPartInfo
	(*TErasurePlacementExt)(nil),                  // 4: NYT.NChunkClient.NProto.TErasurePlacementExt
	(*TStripedErasurePlacementExt)(nil),           // 5: NYT.NChunkClient.NProto.TStripedErasurePlacementExt
	(*TChunkMeta)(nil),                            // 6: NYT.NChunkClient.NProto.TChunkMeta
	(*TStripedErasurePlacementExt_TPartInfo)(nil), // 7: NYT.NChunkClient.NProto.TStripedErasurePlacementExt.TPartInfo
	(*misc.TExtensionSet)(nil),                    // 8: NYT.NProto.TExtensionSet
}
var file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_depIdxs = []int32{
	0, // 0: NYT.NChunkClient.NProto.TBlocksExt.blocks:type_name -> NYT.NChunkClient.NProto.TBlockInfo
	3, // 1: NYT.NChunkClient.NProto.TErasurePlacementExt.part_infos:type_name -> NYT.NChunkClient.NProto.TPartInfo
	7, // 2: NYT.NChunkClient.NProto.TStripedErasurePlacementExt.part_infos:type_name -> NYT.NChunkClient.NProto.TStripedErasurePlacementExt.TPartInfo
	8, // 3: NYT.NChunkClient.NProto.TChunkMeta.extensions:type_name -> NYT.NProto.TExtensionSet
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_init() }
func file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_init() {
	if File_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TBlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TBlocksExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMiscExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPartInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TErasurePlacementExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TStripedErasurePlacementExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TChunkMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TStripedErasurePlacementExt_TPartInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_goTypes,
		DependencyIndexes: file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_depIdxs,
		MessageInfos:      file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_msgTypes,
	}.Build()
	File_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto = out.File
	file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_rawDesc = nil
	file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_goTypes = nil
	file_yt_proto_yt_client_chunk_client_proto_chunk_meta_proto_depIdxs = nil
}
