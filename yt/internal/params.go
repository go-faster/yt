// Code generated by yt-gen-client. DO NOT EDIT.

package internal

import (
	"go.ytsaurus.tech/library/go/core/log"
	"go.ytsaurus.tech/yt/go/guid"
	"go.ytsaurus.tech/yt/go/ypath"
	"go.ytsaurus.tech/yt/go/yson"
	"go.ytsaurus.tech/yt/go/yt"
)

func writeTransactionOptions(w *yson.Writer, o *yt.TransactionOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("transaction_id")
	w.Any(o.TransactionID)
	w.MapKeyString("ping")
	w.Any(o.Ping)
	w.MapKeyString("ping_ancestor_transactions")
	w.Any(o.PingAncestors)
	w.MapKeyString("suppress_transaction_coordinator_sync")
	w.Any(o.SuppressTransactionCoordinatorSync)
	w.MapKeyString("suppress_upstream_sync")
	w.Any(o.SuppressUpstreamSync)
}

func writeAccessTrackingOptions(w *yson.Writer, o *yt.AccessTrackingOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("suppress_access_tracking")
	w.Any(o.SuppressAccessTracking)
	w.MapKeyString("suppress_modification_tracking")
	w.Any(o.SuppressModificationTracking)
}

func writeMutatingOptions(w *yson.Writer, o *yt.MutatingOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("mutation_id")
	w.Any(o.MutationID)
	w.MapKeyString("retry")
	w.Any(o.Retry)
}

func writeReadRetryOptions(w *yson.Writer, o *yt.ReadRetryOptions) {
	if o == nil {
		return
	}
}

func writeMasterReadOptions(w *yson.Writer, o *yt.MasterReadOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("read_from")
	w.Any(o.ReadFrom)
}

func writePrerequisiteOptions(w *yson.Writer, o *yt.PrerequisiteOptions) {
	if o == nil {
		return
	}
	if o.TransactionIDs != nil {
		w.MapKeyString("prerequisite_transaction_ids")
		w.Any(o.TransactionIDs)
	}
	if o.Revisions != nil {
		w.MapKeyString("prerequisite_revisions")
		w.Any(o.Revisions)
	}
}

func writeTimeoutOptions(w *yson.Writer, o *yt.TimeoutOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("timeout")
	w.Any(o.Timeout)
}

func writeCreateNodeOptions(w *yson.Writer, o *yt.CreateNodeOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("recursive")
	w.Any(o.Recursive)
	w.MapKeyString("ignore_existing")
	w.Any(o.IgnoreExisting)
	w.MapKeyString("force")
	w.Any(o.Force)
	if o.Attributes != nil {
		w.MapKeyString("attributes")
		w.Any(o.Attributes)
	}
	writeTransactionOptions(w, o.TransactionOptions)
	writeAccessTrackingOptions(w, o.AccessTrackingOptions)
	writeMutatingOptions(w, o.MutatingOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
}

func writeCreateObjectOptions(w *yson.Writer, o *yt.CreateObjectOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("recursive")
	w.Any(o.Recursive)
	w.MapKeyString("ignore_existing")
	w.Any(o.IgnoreExisting)
	w.MapKeyString("force")
	w.Any(o.Force)
	if o.Attributes != nil {
		w.MapKeyString("attributes")
		w.Any(o.Attributes)
	}
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
	writeAccessTrackingOptions(w, o.AccessTrackingOptions)
	writeMutatingOptions(w, o.MutatingOptions)
}

func writeNodeExistsOptions(w *yson.Writer, o *yt.NodeExistsOptions) {
	if o == nil {
		return
	}
	writeMasterReadOptions(w, o.MasterReadOptions)
	writeTransactionOptions(w, o.TransactionOptions)
	writeAccessTrackingOptions(w, o.AccessTrackingOptions)
	writeReadRetryOptions(w, o.ReadRetryOptions)
}

func writeRemoveNodeOptions(w *yson.Writer, o *yt.RemoveNodeOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("recursive")
	w.Any(o.Recursive)
	w.MapKeyString("force")
	w.Any(o.Force)
	writeTransactionOptions(w, o.TransactionOptions)
	writeAccessTrackingOptions(w, o.AccessTrackingOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
	writeMutatingOptions(w, o.MutatingOptions)
}

func writeGetNodeOptions(w *yson.Writer, o *yt.GetNodeOptions) {
	if o == nil {
		return
	}
	if o.Attributes != nil {
		w.MapKeyString("attributes")
		w.Any(o.Attributes)
	}
	if o.MaxSize != nil {
		w.MapKeyString("max_size")
		w.Any(o.MaxSize)
	}
	writeTransactionOptions(w, o.TransactionOptions)
	writeAccessTrackingOptions(w, o.AccessTrackingOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
	writeMasterReadOptions(w, o.MasterReadOptions)
	writeReadRetryOptions(w, o.ReadRetryOptions)
}

func writeSetNodeOptions(w *yson.Writer, o *yt.SetNodeOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("recursive")
	w.Any(o.Recursive)
	w.MapKeyString("force")
	w.Any(o.Force)
	writeTransactionOptions(w, o.TransactionOptions)
	writeAccessTrackingOptions(w, o.AccessTrackingOptions)
	writeMutatingOptions(w, o.MutatingOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
}

func writeMultisetAttributesOptions(w *yson.Writer, o *yt.MultisetAttributesOptions) {
	if o == nil {
		return
	}
	writeTransactionOptions(w, o.TransactionOptions)
	writeAccessTrackingOptions(w, o.AccessTrackingOptions)
	writeMutatingOptions(w, o.MutatingOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
}

func writeListNodeOptions(w *yson.Writer, o *yt.ListNodeOptions) {
	if o == nil {
		return
	}
	if o.Attributes != nil {
		w.MapKeyString("attributes")
		w.Any(o.Attributes)
	}
	if o.MaxSize != nil {
		w.MapKeyString("max_size")
		w.Any(o.MaxSize)
	}
	writeTransactionOptions(w, o.TransactionOptions)
	writeMasterReadOptions(w, o.MasterReadOptions)
	writeAccessTrackingOptions(w, o.AccessTrackingOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
	writeReadRetryOptions(w, o.ReadRetryOptions)
}

func writeCopyNodeOptions(w *yson.Writer, o *yt.CopyNodeOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("recursive")
	w.Any(o.Recursive)
	w.MapKeyString("ignore_existing")
	w.Any(o.IgnoreExisting)
	w.MapKeyString("force")
	w.Any(o.Force)
	if o.PreserveAccount != nil {
		w.MapKeyString("preserve_account")
		w.Any(o.PreserveAccount)
	}
	if o.PreserveExpirationTime != nil {
		w.MapKeyString("preserve_expiration_time")
		w.Any(o.PreserveExpirationTime)
	}
	if o.PreserveExpirationTimeout != nil {
		w.MapKeyString("preserve_expiration_timeout")
		w.Any(o.PreserveExpirationTimeout)
	}
	if o.PreserveCreationTime != nil {
		w.MapKeyString("preserve_creation_time")
		w.Any(o.PreserveCreationTime)
	}
	if o.PessimisticQuotaCheck != nil {
		w.MapKeyString("pessimistic_quota_check")
		w.Any(o.PessimisticQuotaCheck)
	}
	writeTransactionOptions(w, o.TransactionOptions)
	writeMutatingOptions(w, o.MutatingOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
}

func writeMoveNodeOptions(w *yson.Writer, o *yt.MoveNodeOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("recursive")
	w.Any(o.Recursive)
	w.MapKeyString("force")
	w.Any(o.Force)
	if o.PreserveAccount != nil {
		w.MapKeyString("preserve_account")
		w.Any(o.PreserveAccount)
	}
	if o.PreserveExpirationTime != nil {
		w.MapKeyString("preserve_expiration_time")
		w.Any(o.PreserveExpirationTime)
	}
	if o.PreserveExpirationTimeout != nil {
		w.MapKeyString("preserve_expiration_timeout")
		w.Any(o.PreserveExpirationTimeout)
	}
	if o.PessimisticQuotaCheck != nil {
		w.MapKeyString("pessimistic_quota_check")
		w.Any(o.PessimisticQuotaCheck)
	}
	writeTransactionOptions(w, o.TransactionOptions)
	writeMutatingOptions(w, o.MutatingOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
}

func writeLinkNodeOptions(w *yson.Writer, o *yt.LinkNodeOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("recursive")
	w.Any(o.Recursive)
	w.MapKeyString("ignore_existing")
	w.Any(o.IgnoreExisting)
	w.MapKeyString("force")
	w.Any(o.Force)
	if o.Attributes != nil {
		w.MapKeyString("attributes")
		w.Any(o.Attributes)
	}
	writeTransactionOptions(w, o.TransactionOptions)
	writeMutatingOptions(w, o.MutatingOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
}

func writeStartTxOptions(w *yson.Writer, o *yt.StartTxOptions) {
	if o == nil {
		return
	}
	if o.Timeout != nil {
		w.MapKeyString("timeout")
		w.Any(o.Timeout)
	}
	if o.Deadline != nil {
		w.MapKeyString("deadline")
		w.Any(o.Deadline)
	}
	if o.Type != nil {
		w.MapKeyString("type")
		w.Any(o.Type)
	}
	w.MapKeyString("sticky")
	w.Any(o.Sticky)
	if o.PrerequisiteTransactionIDs != nil {
		w.MapKeyString("prerequisite_transaction_ids")
		w.Any(o.PrerequisiteTransactionIDs)
	}
	if o.Attributes != nil {
		w.MapKeyString("attributes")
		w.Any(o.Attributes)
	}
	writeTransactionOptions(w, o.TransactionOptions)
	writeReadRetryOptions(w, o.ReadRetryOptions)
}

func writePingTxOptions(w *yson.Writer, o *yt.PingTxOptions) {
	if o == nil {
		return
	}
	writeTransactionOptions(w, o.TransactionOptions)
}

func writeAbortTxOptions(w *yson.Writer, o *yt.AbortTxOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("sticky")
	w.Any(o.Sticky)
	writeTransactionOptions(w, o.TransactionOptions)
	writeMutatingOptions(w, o.MutatingOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
}

func writeCommitTxOptions(w *yson.Writer, o *yt.CommitTxOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("sticky")
	w.Any(o.Sticky)
	writeMutatingOptions(w, o.MutatingOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
	writeTransactionOptions(w, o.TransactionOptions)
}

func writeWriteFileOptions(w *yson.Writer, o *yt.WriteFileOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("compute_md5")
	w.Any(o.ComputeMD5)
	w.MapKeyString("file_writer")
	w.Any(o.FileWriter)
	writeTransactionOptions(w, o.TransactionOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
}

func writeReadFileOptions(w *yson.Writer, o *yt.ReadFileOptions) {
	if o == nil {
		return
	}
	if o.Offset != nil {
		w.MapKeyString("offset")
		w.Any(o.Offset)
	}
	if o.Length != nil {
		w.MapKeyString("length")
		w.Any(o.Length)
	}
	w.MapKeyString("file_reader")
	w.Any(o.FileReader)
	writeTransactionOptions(w, o.TransactionOptions)
	writeAccessTrackingOptions(w, o.AccessTrackingOptions)
}

func writePutFileToCacheOptions(w *yson.Writer, o *yt.PutFileToCacheOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("cache_path")
	w.Any(o.CachePath)
	writeMasterReadOptions(w, o.MasterReadOptions)
	writeMutatingOptions(w, o.MutatingOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
}

func writeGetFileFromCacheOptions(w *yson.Writer, o *yt.GetFileFromCacheOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("cache_path")
	w.Any(o.CachePath)
	writeMasterReadOptions(w, o.MasterReadOptions)
	writeReadRetryOptions(w, o.ReadRetryOptions)
}

func writeWriteTableOptions(w *yson.Writer, o *yt.WriteTableOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("table_writer")
	w.Any(o.TableWriter)
	writeTransactionOptions(w, o.TransactionOptions)
	writeAccessTrackingOptions(w, o.AccessTrackingOptions)
}

func writeReadTableOptions(w *yson.Writer, o *yt.ReadTableOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("unordered")
	w.Any(o.Unordered)
	w.MapKeyString("table_reader")
	w.Any(o.TableReader)
	if o.ControlAttributes != nil {
		w.MapKeyString("control_attributes")
		w.Any(o.ControlAttributes)
	}
	if o.StartRowIndexOnly != nil {
		w.MapKeyString("start_row_index_only")
		w.Any(o.StartRowIndexOnly)
	}
	writeTransactionOptions(w, o.TransactionOptions)
	writeAccessTrackingOptions(w, o.AccessTrackingOptions)
}

func writeStartOperationOptions(w *yson.Writer, o *yt.StartOperationOptions) {
	if o == nil {
		return
	}
	writeTransactionOptions(w, o.TransactionOptions)
	writeMutatingOptions(w, o.MutatingOptions)
}

func writeAbortOperationOptions(w *yson.Writer, o *yt.AbortOperationOptions) {
	if o == nil {
		return
	}
	if o.AbortMessage != nil {
		w.MapKeyString("abort_message")
		w.Any(o.AbortMessage)
	}
}

func writeSuspendOperationOptions(w *yson.Writer, o *yt.SuspendOperationOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("abort_running_jobs")
	w.Any(o.AbortRunningJobs)
}

func writeResumeOperationOptions(w *yson.Writer, o *yt.ResumeOperationOptions) {
	if o == nil {
		return
	}
}

func writeCompleteOperationOptions(w *yson.Writer, o *yt.CompleteOperationOptions) {
	if o == nil {
		return
	}
}

func writeUpdateOperationParametersOptions(w *yson.Writer, o *yt.UpdateOperationParametersOptions) {
	if o == nil {
		return
	}
}

func writeTransferAccountResourcesOptions(w *yson.Writer, o *yt.TransferAccountResourcesOptions) {
	if o == nil {
		return
	}
	writeMutatingOptions(w, o.MutatingOptions)
}

func writeTransferPoolResourcesOptions(w *yson.Writer, o *yt.TransferPoolResourcesOptions) {
	if o == nil {
		return
	}
	writeMutatingOptions(w, o.MutatingOptions)
}

func writeListOperationsOptions(w *yson.Writer, o *yt.ListOperationsOptions) {
	if o == nil {
		return
	}
	if o.FromTime != nil {
		w.MapKeyString("from_time")
		w.Any(o.FromTime)
	}
	if o.ToTime != nil {
		w.MapKeyString("to_time")
		w.Any(o.ToTime)
	}
	if o.Cursor != nil {
		w.MapKeyString("cursor_time")
		w.Any(o.Cursor)
	}
	if o.User != nil {
		w.MapKeyString("user")
		w.Any(o.User)
	}
	if o.State != nil {
		w.MapKeyString("state")
		w.Any(o.State)
	}
	if o.Type != nil {
		w.MapKeyString("type")
		w.Any(o.Type)
	}
	if o.Filter != nil {
		w.MapKeyString("filter")
		w.Any(o.Filter)
	}
	if o.Limit != nil {
		w.MapKeyString("limit")
		w.Any(o.Limit)
	}
	writeMasterReadOptions(w, o.MasterReadOptions)
	writeReadRetryOptions(w, o.ReadRetryOptions)
}

func writeListJobsOptions(w *yson.Writer, o *yt.ListJobsOptions) {
	if o == nil {
		return
	}
	if o.JobType != nil {
		w.MapKeyString("job_type")
		w.Any(o.JobType)
	}
	if o.JobState != nil {
		w.MapKeyString("job_state")
		w.Any(o.JobState)
	}
	if o.Address != nil {
		w.MapKeyString("address")
		w.Any(o.Address)
	}
	if o.WithStderr != nil {
		w.MapKeyString("with_stderr")
		w.Any(o.WithStderr)
	}
	if o.WithFailContext != nil {
		w.MapKeyString("with_fail_context")
		w.Any(o.WithFailContext)
	}
	if o.SortField != nil {
		w.MapKeyString("sort_field")
		w.Any(o.SortField)
	}
	if o.SortOrder != nil {
		w.MapKeyString("sort_order")
		w.Any(o.SortOrder)
	}
	if o.Limit != nil {
		w.MapKeyString("limit")
		w.Any(o.Limit)
	}
	if o.Offset != nil {
		w.MapKeyString("offset")
		w.Any(o.Offset)
	}
	if o.DataSource != nil {
		w.MapKeyString("data_source")
		w.Any(o.DataSource)
	}
}

func writeGetJobStderrOptions(w *yson.Writer, o *yt.GetJobStderrOptions) {
	if o == nil {
		return
	}
}

func writeGetOperationOptions(w *yson.Writer, o *yt.GetOperationOptions) {
	if o == nil {
		return
	}
	if o.Attributes != nil {
		w.MapKeyString("attributes")
		w.Any(o.Attributes)
	}
	if o.IncludeRuntime != nil {
		w.MapKeyString("include_runtime")
		w.Any(o.IncludeRuntime)
	}
	writeMasterReadOptions(w, o.MasterReadOptions)
	writeReadRetryOptions(w, o.ReadRetryOptions)
}

func writeAddMemberOptions(w *yson.Writer, o *yt.AddMemberOptions) {
	if o == nil {
		return
	}
	writeMutatingOptions(w, o.MutatingOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
}

func writeRemoveMemberOptions(w *yson.Writer, o *yt.RemoveMemberOptions) {
	if o == nil {
		return
	}
	writeMutatingOptions(w, o.MutatingOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
}

func writeBuildMasterSnapshots(w *yson.Writer, o *yt.BuildMasterSnapshotsOptions) {
	if o == nil {
		return
	}
	if o.SetReadOnly != nil {
		w.MapKeyString("set_read_only")
		w.Any(o.SetReadOnly)
	}
	if o.WaitForSnapshotCompletion != nil {
		w.MapKeyString("wait_for_snapshot_completion")
		w.Any(o.WaitForSnapshotCompletion)
	}
	if o.Retry != nil {
		w.MapKeyString("retry")
		w.Any(o.Retry)
	}
}

func writeCheckPermissionOptions(w *yson.Writer, o *yt.CheckPermissionOptions) {
	if o == nil {
		return
	}
	if o.Columns != nil {
		w.MapKeyString("columns")
		w.Any(o.Columns)
	}
	writeTransactionOptions(w, o.TransactionOptions)
	writePrerequisiteOptions(w, o.PrerequisiteOptions)
	writeMasterReadOptions(w, o.MasterReadOptions)
}

func writeLockNodeOptions(w *yson.Writer, o *yt.LockNodeOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("waitable")
	w.Any(o.Waitable)
	if o.ChildKey != nil {
		w.MapKeyString("child_key")
		w.Any(o.ChildKey)
	}
	if o.AttributeKey != nil {
		w.MapKeyString("attribute_key")
		w.Any(o.AttributeKey)
	}
	writeTransactionOptions(w, o.TransactionOptions)
	writeMutatingOptions(w, o.MutatingOptions)
}

func writeUnlockNodeOptions(w *yson.Writer, o *yt.UnlockNodeOptions) {
	if o == nil {
		return
	}
	writeTransactionOptions(w, o.TransactionOptions)
	writeMutatingOptions(w, o.MutatingOptions)
}

func writeTabletRangeOptions(w *yson.Writer, o *yt.TabletRangeOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("first_tablet_index")
	w.Any(o.FirstTabletIndex)
	w.MapKeyString("last_tablet_index")
	w.Any(o.LastTabletIndex)
}

func writeMountTableOptions(w *yson.Writer, o *yt.MountTableOptions) {
	if o == nil {
		return
	}
	if o.CellID != nil {
		w.MapKeyString("cell_id")
		w.Any(o.CellID)
	}
	if o.TargetCellIDs != nil {
		w.MapKeyString("target_cell_ids")
		w.Any(o.TargetCellIDs)
	}
	w.MapKeyString("freeze")
	w.Any(o.Freeze)
	writeTabletRangeOptions(w, o.TabletRangeOptions)
	writeMutatingOptions(w, o.MutatingOptions)
}

func writeUnmountTableOptions(w *yson.Writer, o *yt.UnmountTableOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("force")
	w.Any(o.Force)
	writeTabletRangeOptions(w, o.TabletRangeOptions)
	writeMutatingOptions(w, o.MutatingOptions)
}

func writeRemountTableOptions(w *yson.Writer, o *yt.RemountTableOptions) {
	if o == nil {
		return
	}
	writeTabletRangeOptions(w, o.TabletRangeOptions)
	writeMutatingOptions(w, o.MutatingOptions)
}

func writeFreezeTableOptions(w *yson.Writer, o *yt.FreezeTableOptions) {
	if o == nil {
		return
	}
	writeTabletRangeOptions(w, o.TabletRangeOptions)
	writeMutatingOptions(w, o.MutatingOptions)
}

func writeUnfreezeTableOptions(w *yson.Writer, o *yt.UnfreezeTableOptions) {
	if o == nil {
		return
	}
	writeTabletRangeOptions(w, o.TabletRangeOptions)
	writeMutatingOptions(w, o.MutatingOptions)
}

func writeReshardTableOptions(w *yson.Writer, o *yt.ReshardTableOptions) {
	if o == nil {
		return
	}
	if o.PivotKeys != nil {
		w.MapKeyString("pivot_keys")
		w.Any(o.PivotKeys)
	}
	if o.TabletCount != nil {
		w.MapKeyString("tablet_count")
		w.Any(o.TabletCount)
	}
	writeTabletRangeOptions(w, o.TabletRangeOptions)
	writeMutatingOptions(w, o.MutatingOptions)
}

func writeAlterTableOptions(w *yson.Writer, o *yt.AlterTableOptions) {
	if o == nil {
		return
	}
	if o.Schema != nil {
		w.MapKeyString("schema")
		w.Any(o.Schema)
	}
	if o.Dynamic != nil {
		w.MapKeyString("dynamic")
		w.Any(o.Dynamic)
	}
	if o.UpstreamReplicaID != nil {
		w.MapKeyString("upstream_replica_id")
		w.Any(o.UpstreamReplicaID)
	}
	writeMutatingOptions(w, o.MutatingOptions)
}

func writeAlterTableReplicaOptions(w *yson.Writer, o *yt.AlterTableReplicaOptions) {
	if o == nil {
		return
	}
	if o.Enabled != nil {
		w.MapKeyString("enabled")
		w.Any(o.Enabled)
	}
	if o.Mode != nil {
		w.MapKeyString("mode")
		w.Any(o.Mode)
	}
}

func writeLookupRowsOptions(w *yson.Writer, o *yt.LookupRowsOptions) {
	if o == nil {
		return
	}
	w.MapKeyString("keep_missing_rows")
	w.Any(o.KeepMissingRows)
	if o.Timestamp != nil {
		w.MapKeyString("timestamp")
		w.Any(o.Timestamp)
	}
	if o.Columns != nil {
		w.MapKeyString("column_names")
		w.Any(o.Columns)
	}
	writeTransactionOptions(w, o.TransactionOptions)
}

func writeInsertRowsOptions(w *yson.Writer, o *yt.InsertRowsOptions) {
	if o == nil {
		return
	}
	if o.Atomicity != nil {
		w.MapKeyString("atomicity")
		w.Any(o.Atomicity)
	}
	if o.RequireSyncReplica != nil {
		w.MapKeyString("require_sync_replica")
		w.Any(o.RequireSyncReplica)
	}
	if o.Update != nil {
		w.MapKeyString("update")
		w.Any(o.Update)
	}
	writeTransactionOptions(w, o.TransactionOptions)
}

func writeLockRowsOptions(w *yson.Writer, o *yt.LockRowsOptions) {
	if o == nil {
		return
	}
	writeTransactionOptions(w, o.TransactionOptions)
}

func writeDeleteRowsOptions(w *yson.Writer, o *yt.DeleteRowsOptions) {
	if o == nil {
		return
	}
	if o.RequireSyncReplica != nil {
		w.MapKeyString("require_sync_replica")
		w.Any(o.RequireSyncReplica)
	}
	writeTransactionOptions(w, o.TransactionOptions)
}

func writeSelectRowsOptions(w *yson.Writer, o *yt.SelectRowsOptions) {
	if o == nil {
		return
	}
	if o.FailOnIncompleteResult != nil {
		w.MapKeyString("fail_on_incomplete_result")
		w.Any(o.FailOnIncompleteResult)
	}
	if o.InputRowLimit != nil {
		w.MapKeyString("input_row_limit")
		w.Any(o.InputRowLimit)
	}
	if o.OutputRowLimit != nil {
		w.MapKeyString("output_row_limit")
		w.Any(o.OutputRowLimit)
	}
	if o.Timestamp != nil {
		w.MapKeyString("timestamp")
		w.Any(o.Timestamp)
	}
	if o.PlaceholderValues != nil {
		w.MapKeyString("placeholder_values")
		w.Any(o.PlaceholderValues)
	}
	writeTransactionOptions(w, o.TransactionOptions)
	writeTimeoutOptions(w, o.TimeoutOptions)
}

func writeStartTabletTxOptions(w *yson.Writer, o *yt.StartTabletTxOptions) {
	if o == nil {
		return
	}
	if o.Atomicity != nil {
		w.MapKeyString("atomicity")
		w.Any(o.Atomicity)
	}
	if o.Timeout != nil {
		w.MapKeyString("timeout")
		w.Any(o.Timeout)
	}
	w.MapKeyString("type")
	w.Any(o.Type)
	w.MapKeyString("sticky")
	w.Any(o.Sticky)
}

func writeLocateSkynetShareOptions(w *yson.Writer, o *yt.LocateSkynetShareOptions) {
	if o == nil {
		return
	}
}

func writeGenerateTimestampOptions(w *yson.Writer, o *yt.GenerateTimestampOptions) {
	if o == nil {
		return
	}
}

func writeGetInSyncReplicasOptions(w *yson.Writer, o *yt.GetInSyncReplicasOptions) {
	if o == nil {
		return
	}
}

type CreateNodeParams struct {
	verb    Verb
	path    ypath.YPath
	typ     yt.NodeType
	options *yt.CreateNodeOptions
}

func NewCreateNodeParams(
	path ypath.YPath,
	typ yt.NodeType,
	options *yt.CreateNodeOptions,
) *CreateNodeParams {
	if options == nil {
		options = &yt.CreateNodeOptions{}
	}
	return &CreateNodeParams{
		Verb("create"),
		path,
		typ,
		options,
	}
}

func (p *CreateNodeParams) HTTPVerb() Verb {
	return p.verb
}
func (p *CreateNodeParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *CreateNodeParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
		log.Any("typ", p.typ),
	}
}

func (p *CreateNodeParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	w.MapKeyString("type")
	w.Any(p.typ)
	writeCreateNodeOptions(w, p.options)
}

func (p *CreateNodeParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *CreateNodeParams) AccessTrackingOptions() **yt.AccessTrackingOptions {
	return &p.options.AccessTrackingOptions
}

func (p *CreateNodeParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

func (p *CreateNodeParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

type CreateObjectParams struct {
	verb    Verb
	typ     yt.NodeType
	options *yt.CreateObjectOptions
}

func NewCreateObjectParams(
	typ yt.NodeType,
	options *yt.CreateObjectOptions,
) *CreateObjectParams {
	if options == nil {
		options = &yt.CreateObjectOptions{}
	}
	return &CreateObjectParams{
		Verb("create"),
		typ,
		options,
	}
}

func (p *CreateObjectParams) HTTPVerb() Verb {
	return p.verb
}
func (p *CreateObjectParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *CreateObjectParams) Log() []log.Field {
	return []log.Field{
		log.Any("typ", p.typ),
	}
}

func (p *CreateObjectParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("type")
	w.Any(p.typ)
	writeCreateObjectOptions(w, p.options)
}

func (p *CreateObjectParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

func (p *CreateObjectParams) AccessTrackingOptions() **yt.AccessTrackingOptions {
	return &p.options.AccessTrackingOptions
}

func (p *CreateObjectParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

type NodeExistsParams struct {
	verb    Verb
	path    ypath.YPath
	options *yt.NodeExistsOptions
}

func NewNodeExistsParams(
	path ypath.YPath,
	options *yt.NodeExistsOptions,
) *NodeExistsParams {
	if options == nil {
		options = &yt.NodeExistsOptions{}
	}
	return &NodeExistsParams{
		Verb("exists"),
		path,
		options,
	}
}

func (p *NodeExistsParams) HTTPVerb() Verb {
	return p.verb
}
func (p *NodeExistsParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *NodeExistsParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *NodeExistsParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeNodeExistsOptions(w, p.options)
}

func (p *NodeExistsParams) MasterReadOptions() **yt.MasterReadOptions {
	return &p.options.MasterReadOptions
}

func (p *NodeExistsParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *NodeExistsParams) AccessTrackingOptions() **yt.AccessTrackingOptions {
	return &p.options.AccessTrackingOptions
}

func (p *NodeExistsParams) ReadRetryOptions() **yt.ReadRetryOptions {
	return &p.options.ReadRetryOptions
}

type RemoveNodeParams struct {
	verb    Verb
	path    ypath.YPath
	options *yt.RemoveNodeOptions
}

func NewRemoveNodeParams(
	path ypath.YPath,
	options *yt.RemoveNodeOptions,
) *RemoveNodeParams {
	if options == nil {
		options = &yt.RemoveNodeOptions{}
	}
	return &RemoveNodeParams{
		Verb("remove"),
		path,
		options,
	}
}

func (p *RemoveNodeParams) HTTPVerb() Verb {
	return p.verb
}
func (p *RemoveNodeParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *RemoveNodeParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *RemoveNodeParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeRemoveNodeOptions(w, p.options)
}

func (p *RemoveNodeParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *RemoveNodeParams) AccessTrackingOptions() **yt.AccessTrackingOptions {
	return &p.options.AccessTrackingOptions
}

func (p *RemoveNodeParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

func (p *RemoveNodeParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

type GetNodeParams struct {
	verb    Verb
	path    ypath.YPath
	options *yt.GetNodeOptions
}

func NewGetNodeParams(
	path ypath.YPath,
	options *yt.GetNodeOptions,
) *GetNodeParams {
	if options == nil {
		options = &yt.GetNodeOptions{}
	}
	return &GetNodeParams{
		Verb("get"),
		path,
		options,
	}
}

func (p *GetNodeParams) HTTPVerb() Verb {
	return p.verb
}
func (p *GetNodeParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *GetNodeParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *GetNodeParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeGetNodeOptions(w, p.options)
}

func (p *GetNodeParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *GetNodeParams) AccessTrackingOptions() **yt.AccessTrackingOptions {
	return &p.options.AccessTrackingOptions
}

func (p *GetNodeParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

func (p *GetNodeParams) MasterReadOptions() **yt.MasterReadOptions {
	return &p.options.MasterReadOptions
}

func (p *GetNodeParams) ReadRetryOptions() **yt.ReadRetryOptions {
	return &p.options.ReadRetryOptions
}

type SetNodeParams struct {
	verb    Verb
	path    ypath.YPath
	options *yt.SetNodeOptions
}

func NewSetNodeParams(
	path ypath.YPath,
	options *yt.SetNodeOptions,
) *SetNodeParams {
	if options == nil {
		options = &yt.SetNodeOptions{}
	}
	return &SetNodeParams{
		Verb("set"),
		path,
		options,
	}
}

func (p *SetNodeParams) HTTPVerb() Verb {
	return p.verb
}
func (p *SetNodeParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *SetNodeParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *SetNodeParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeSetNodeOptions(w, p.options)
}

func (p *SetNodeParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *SetNodeParams) AccessTrackingOptions() **yt.AccessTrackingOptions {
	return &p.options.AccessTrackingOptions
}

func (p *SetNodeParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

func (p *SetNodeParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

type MultisetAttributesParams struct {
	verb    Verb
	path    ypath.YPath
	options *yt.MultisetAttributesOptions
}

func NewMultisetAttributesParams(
	path ypath.YPath,
	options *yt.MultisetAttributesOptions,
) *MultisetAttributesParams {
	if options == nil {
		options = &yt.MultisetAttributesOptions{}
	}
	return &MultisetAttributesParams{
		Verb("multiset_attributes"),
		path,
		options,
	}
}

func (p *MultisetAttributesParams) HTTPVerb() Verb {
	return p.verb
}
func (p *MultisetAttributesParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *MultisetAttributesParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *MultisetAttributesParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeMultisetAttributesOptions(w, p.options)
}

func (p *MultisetAttributesParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *MultisetAttributesParams) AccessTrackingOptions() **yt.AccessTrackingOptions {
	return &p.options.AccessTrackingOptions
}

func (p *MultisetAttributesParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

func (p *MultisetAttributesParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

type ListNodeParams struct {
	verb    Verb
	path    ypath.YPath
	options *yt.ListNodeOptions
}

func NewListNodeParams(
	path ypath.YPath,
	options *yt.ListNodeOptions,
) *ListNodeParams {
	if options == nil {
		options = &yt.ListNodeOptions{}
	}
	return &ListNodeParams{
		Verb("list"),
		path,
		options,
	}
}

func (p *ListNodeParams) HTTPVerb() Verb {
	return p.verb
}
func (p *ListNodeParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *ListNodeParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *ListNodeParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeListNodeOptions(w, p.options)
}

func (p *ListNodeParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *ListNodeParams) MasterReadOptions() **yt.MasterReadOptions {
	return &p.options.MasterReadOptions
}

func (p *ListNodeParams) AccessTrackingOptions() **yt.AccessTrackingOptions {
	return &p.options.AccessTrackingOptions
}

func (p *ListNodeParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

func (p *ListNodeParams) ReadRetryOptions() **yt.ReadRetryOptions {
	return &p.options.ReadRetryOptions
}

type CopyNodeParams struct {
	verb    Verb
	src     ypath.YPath
	dst     ypath.YPath
	options *yt.CopyNodeOptions
}

func NewCopyNodeParams(
	src ypath.YPath,
	dst ypath.YPath,
	options *yt.CopyNodeOptions,
) *CopyNodeParams {
	if options == nil {
		options = &yt.CopyNodeOptions{}
	}
	return &CopyNodeParams{
		Verb("copy"),
		src,
		dst,
		options,
	}
}

func (p *CopyNodeParams) HTTPVerb() Verb {
	return p.verb
}
func (p *CopyNodeParams) YPath() (ypath.YPath, bool) {
	return p.src, true
}
func (p *CopyNodeParams) Log() []log.Field {
	return []log.Field{
		log.Any("src", p.src),
		log.Any("dst", p.dst),
	}
}

func (p *CopyNodeParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("source_path")
	w.Any(p.src)
	w.MapKeyString("destination_path")
	w.Any(p.dst)
	writeCopyNodeOptions(w, p.options)
}

func (p *CopyNodeParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *CopyNodeParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

func (p *CopyNodeParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

type MoveNodeParams struct {
	verb    Verb
	src     ypath.YPath
	dst     ypath.YPath
	options *yt.MoveNodeOptions
}

func NewMoveNodeParams(
	src ypath.YPath,
	dst ypath.YPath,
	options *yt.MoveNodeOptions,
) *MoveNodeParams {
	if options == nil {
		options = &yt.MoveNodeOptions{}
	}
	return &MoveNodeParams{
		Verb("move"),
		src,
		dst,
		options,
	}
}

func (p *MoveNodeParams) HTTPVerb() Verb {
	return p.verb
}
func (p *MoveNodeParams) YPath() (ypath.YPath, bool) {
	return p.src, true
}
func (p *MoveNodeParams) Log() []log.Field {
	return []log.Field{
		log.Any("src", p.src),
		log.Any("dst", p.dst),
	}
}

func (p *MoveNodeParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("source_path")
	w.Any(p.src)
	w.MapKeyString("destination_path")
	w.Any(p.dst)
	writeMoveNodeOptions(w, p.options)
}

func (p *MoveNodeParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *MoveNodeParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

func (p *MoveNodeParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

type LinkNodeParams struct {
	verb    Verb
	target  ypath.YPath
	link    ypath.YPath
	options *yt.LinkNodeOptions
}

func NewLinkNodeParams(
	target ypath.YPath,
	link ypath.YPath,
	options *yt.LinkNodeOptions,
) *LinkNodeParams {
	if options == nil {
		options = &yt.LinkNodeOptions{}
	}
	return &LinkNodeParams{
		Verb("link"),
		target,
		link,
		options,
	}
}

func (p *LinkNodeParams) HTTPVerb() Verb {
	return p.verb
}
func (p *LinkNodeParams) YPath() (ypath.YPath, bool) {
	return p.target, true
}
func (p *LinkNodeParams) Log() []log.Field {
	return []log.Field{
		log.Any("target", p.target),
		log.Any("link", p.link),
	}
}

func (p *LinkNodeParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("target_path")
	w.Any(p.target)
	w.MapKeyString("link_path")
	w.Any(p.link)
	writeLinkNodeOptions(w, p.options)
}

func (p *LinkNodeParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *LinkNodeParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

func (p *LinkNodeParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

type StartTxParams struct {
	verb    Verb
	options *yt.StartTxOptions
}

func NewStartTxParams(
	options *yt.StartTxOptions,
) *StartTxParams {
	if options == nil {
		options = &yt.StartTxOptions{}
	}
	return &StartTxParams{
		Verb("start_transaction"),
		options,
	}
}

func (p *StartTxParams) HTTPVerb() Verb {
	return p.verb
}
func (p *StartTxParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *StartTxParams) Log() []log.Field {
	return []log.Field{}
}

func (p *StartTxParams) MarshalHTTP(w *yson.Writer) {
	writeStartTxOptions(w, p.options)
}

func (p *StartTxParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *StartTxParams) ReadRetryOptions() **yt.ReadRetryOptions {
	return &p.options.ReadRetryOptions
}

type StartTabletTxParams struct {
	verb    Verb
	options *yt.StartTabletTxOptions
}

func NewStartTabletTxParams(
	options *yt.StartTabletTxOptions,
) *StartTabletTxParams {
	if options == nil {
		options = &yt.StartTabletTxOptions{}
	}
	return &StartTabletTxParams{
		Verb("start_transaction"),
		options,
	}
}

func (p *StartTabletTxParams) HTTPVerb() Verb {
	return p.verb
}
func (p *StartTabletTxParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *StartTabletTxParams) Log() []log.Field {
	return []log.Field{}
}

func (p *StartTabletTxParams) MarshalHTTP(w *yson.Writer) {
	writeStartTabletTxOptions(w, p.options)
}

type PingTxParams struct {
	verb    Verb
	id      yt.TxID
	options *yt.PingTxOptions
}

func NewPingTxParams(
	id yt.TxID,
	options *yt.PingTxOptions,
) *PingTxParams {
	if options == nil {
		options = &yt.PingTxOptions{}
	}
	return &PingTxParams{
		Verb("ping_transaction"),
		id,
		options,
	}
}

func (p *PingTxParams) HTTPVerb() Verb {
	return p.verb
}
func (p *PingTxParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *PingTxParams) Log() []log.Field {
	return []log.Field{
		log.Any("id", p.id),
	}
}

func (p *PingTxParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("transaction_id")
	w.Any(p.id)
	writePingTxOptions(w, p.options)
}

func (p *PingTxParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

type AbortTxParams struct {
	verb    Verb
	id      yt.TxID
	options *yt.AbortTxOptions
}

func NewAbortTxParams(
	id yt.TxID,
	options *yt.AbortTxOptions,
) *AbortTxParams {
	if options == nil {
		options = &yt.AbortTxOptions{}
	}
	return &AbortTxParams{
		Verb("abort_transaction"),
		id,
		options,
	}
}

func (p *AbortTxParams) HTTPVerb() Verb {
	return p.verb
}
func (p *AbortTxParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *AbortTxParams) Log() []log.Field {
	return []log.Field{
		log.Any("id", p.id),
	}
}

func (p *AbortTxParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("transaction_id")
	w.Any(p.id)
	writeAbortTxOptions(w, p.options)
}

func (p *AbortTxParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *AbortTxParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

func (p *AbortTxParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

type CommitTxParams struct {
	verb    Verb
	id      yt.TxID
	options *yt.CommitTxOptions
}

func NewCommitTxParams(
	id yt.TxID,
	options *yt.CommitTxOptions,
) *CommitTxParams {
	if options == nil {
		options = &yt.CommitTxOptions{}
	}
	return &CommitTxParams{
		Verb("commit_transaction"),
		id,
		options,
	}
}

func (p *CommitTxParams) HTTPVerb() Verb {
	return p.verb
}
func (p *CommitTxParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *CommitTxParams) Log() []log.Field {
	return []log.Field{
		log.Any("id", p.id),
	}
}

func (p *CommitTxParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("transaction_id")
	w.Any(p.id)
	writeCommitTxOptions(w, p.options)
}

func (p *CommitTxParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

func (p *CommitTxParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

func (p *CommitTxParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

type WriteFileParams struct {
	verb    Verb
	path    ypath.YPath
	options *yt.WriteFileOptions
}

func NewWriteFileParams(
	path ypath.YPath,
	options *yt.WriteFileOptions,
) *WriteFileParams {
	if options == nil {
		options = &yt.WriteFileOptions{}
	}
	return &WriteFileParams{
		Verb("write_file"),
		path,
		options,
	}
}

func (p *WriteFileParams) HTTPVerb() Verb {
	return p.verb
}
func (p *WriteFileParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *WriteFileParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *WriteFileParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeWriteFileOptions(w, p.options)
}

func (p *WriteFileParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *WriteFileParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

type ReadFileParams struct {
	verb    Verb
	path    ypath.YPath
	options *yt.ReadFileOptions
}

func NewReadFileParams(
	path ypath.YPath,
	options *yt.ReadFileOptions,
) *ReadFileParams {
	if options == nil {
		options = &yt.ReadFileOptions{}
	}
	return &ReadFileParams{
		Verb("read_file"),
		path,
		options,
	}
}

func (p *ReadFileParams) HTTPVerb() Verb {
	return p.verb
}
func (p *ReadFileParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *ReadFileParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *ReadFileParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeReadFileOptions(w, p.options)
}

func (p *ReadFileParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *ReadFileParams) AccessTrackingOptions() **yt.AccessTrackingOptions {
	return &p.options.AccessTrackingOptions
}

type PutFileToCacheParams struct {
	verb    Verb
	path    ypath.YPath
	md5     string
	options *yt.PutFileToCacheOptions
}

func NewPutFileToCacheParams(
	path ypath.YPath,
	md5 string,
	options *yt.PutFileToCacheOptions,
) *PutFileToCacheParams {
	if options == nil {
		options = &yt.PutFileToCacheOptions{}
	}
	return &PutFileToCacheParams{
		Verb("put_file_to_cache"),
		path,
		md5,
		options,
	}
}

func (p *PutFileToCacheParams) HTTPVerb() Verb {
	return p.verb
}
func (p *PutFileToCacheParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *PutFileToCacheParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
		log.Any("md5", p.md5),
	}
}

func (p *PutFileToCacheParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	w.MapKeyString("md5")
	w.Any(p.md5)
	writePutFileToCacheOptions(w, p.options)
}

func (p *PutFileToCacheParams) MasterReadOptions() **yt.MasterReadOptions {
	return &p.options.MasterReadOptions
}

func (p *PutFileToCacheParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

func (p *PutFileToCacheParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

type GetFileFromCacheParams struct {
	verb    Verb
	md5     string
	options *yt.GetFileFromCacheOptions
}

func NewGetFileFromCacheParams(
	md5 string,
	options *yt.GetFileFromCacheOptions,
) *GetFileFromCacheParams {
	if options == nil {
		options = &yt.GetFileFromCacheOptions{}
	}
	return &GetFileFromCacheParams{
		Verb("get_file_from_cache"),
		md5,
		options,
	}
}

func (p *GetFileFromCacheParams) HTTPVerb() Verb {
	return p.verb
}
func (p *GetFileFromCacheParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *GetFileFromCacheParams) Log() []log.Field {
	return []log.Field{
		log.Any("md5", p.md5),
	}
}

func (p *GetFileFromCacheParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("md5")
	w.Any(p.md5)
	writeGetFileFromCacheOptions(w, p.options)
}

func (p *GetFileFromCacheParams) MasterReadOptions() **yt.MasterReadOptions {
	return &p.options.MasterReadOptions
}

func (p *GetFileFromCacheParams) ReadRetryOptions() **yt.ReadRetryOptions {
	return &p.options.ReadRetryOptions
}

type WriteTableParams struct {
	verb    Verb
	path    ypath.YPath
	options *yt.WriteTableOptions
}

func NewWriteTableParams(
	path ypath.YPath,
	options *yt.WriteTableOptions,
) *WriteTableParams {
	if options == nil {
		options = &yt.WriteTableOptions{}
	}
	return &WriteTableParams{
		Verb("write_table"),
		path,
		options,
	}
}

func (p *WriteTableParams) HTTPVerb() Verb {
	return p.verb
}
func (p *WriteTableParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *WriteTableParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *WriteTableParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeWriteTableOptions(w, p.options)
}

func (p *WriteTableParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *WriteTableParams) AccessTrackingOptions() **yt.AccessTrackingOptions {
	return &p.options.AccessTrackingOptions
}

type ReadTableParams struct {
	verb    Verb
	path    ypath.YPath
	options *yt.ReadTableOptions
}

func NewReadTableParams(
	path ypath.YPath,
	options *yt.ReadTableOptions,
) *ReadTableParams {
	if options == nil {
		options = &yt.ReadTableOptions{}
	}
	return &ReadTableParams{
		Verb("read_table"),
		path,
		options,
	}
}

func (p *ReadTableParams) HTTPVerb() Verb {
	return p.verb
}
func (p *ReadTableParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *ReadTableParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *ReadTableParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeReadTableOptions(w, p.options)
}

func (p *ReadTableParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *ReadTableParams) AccessTrackingOptions() **yt.AccessTrackingOptions {
	return &p.options.AccessTrackingOptions
}

type StartOperationParams struct {
	verb    Verb
	opType  yt.OperationType
	spec    interface{}
	options *yt.StartOperationOptions
}

func NewStartOperationParams(
	opType yt.OperationType,
	spec interface{},
	options *yt.StartOperationOptions,
) *StartOperationParams {
	if options == nil {
		options = &yt.StartOperationOptions{}
	}
	return &StartOperationParams{
		Verb("start_operation"),
		opType,
		spec,
		options,
	}
}

func (p *StartOperationParams) HTTPVerb() Verb {
	return p.verb
}
func (p *StartOperationParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *StartOperationParams) Log() []log.Field {
	return []log.Field{
		log.Any("opType", p.opType),
	}
}

func (p *StartOperationParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("operation_type")
	w.Any(p.opType)
	w.MapKeyString("spec")
	w.Any(p.spec)
	writeStartOperationOptions(w, p.options)
}

func (p *StartOperationParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *StartOperationParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

type AbortOperationParams struct {
	verb    Verb
	opID    yt.OperationID
	options *yt.AbortOperationOptions
}

func NewAbortOperationParams(
	opID yt.OperationID,
	options *yt.AbortOperationOptions,
) *AbortOperationParams {
	if options == nil {
		options = &yt.AbortOperationOptions{}
	}
	return &AbortOperationParams{
		Verb("abort_operation"),
		opID,
		options,
	}
}

func (p *AbortOperationParams) HTTPVerb() Verb {
	return p.verb
}
func (p *AbortOperationParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *AbortOperationParams) Log() []log.Field {
	return []log.Field{
		log.Any("opID", p.opID),
	}
}

func (p *AbortOperationParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("operation_id")
	w.Any(p.opID)
	writeAbortOperationOptions(w, p.options)
}

type SuspendOperationParams struct {
	verb    Verb
	opID    yt.OperationID
	options *yt.SuspendOperationOptions
}

func NewSuspendOperationParams(
	opID yt.OperationID,
	options *yt.SuspendOperationOptions,
) *SuspendOperationParams {
	if options == nil {
		options = &yt.SuspendOperationOptions{}
	}
	return &SuspendOperationParams{
		Verb("suspend_operation"),
		opID,
		options,
	}
}

func (p *SuspendOperationParams) HTTPVerb() Verb {
	return p.verb
}
func (p *SuspendOperationParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *SuspendOperationParams) Log() []log.Field {
	return []log.Field{
		log.Any("opID", p.opID),
	}
}

func (p *SuspendOperationParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("operation_id")
	w.Any(p.opID)
	writeSuspendOperationOptions(w, p.options)
}

type ResumeOperationParams struct {
	verb    Verb
	opID    yt.OperationID
	options *yt.ResumeOperationOptions
}

func NewResumeOperationParams(
	opID yt.OperationID,
	options *yt.ResumeOperationOptions,
) *ResumeOperationParams {
	if options == nil {
		options = &yt.ResumeOperationOptions{}
	}
	return &ResumeOperationParams{
		Verb("resume_operation"),
		opID,
		options,
	}
}

func (p *ResumeOperationParams) HTTPVerb() Verb {
	return p.verb
}
func (p *ResumeOperationParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *ResumeOperationParams) Log() []log.Field {
	return []log.Field{
		log.Any("opID", p.opID),
	}
}

func (p *ResumeOperationParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("operation_id")
	w.Any(p.opID)
	writeResumeOperationOptions(w, p.options)
}

type CompleteOperationParams struct {
	verb    Verb
	opID    yt.OperationID
	options *yt.CompleteOperationOptions
}

func NewCompleteOperationParams(
	opID yt.OperationID,
	options *yt.CompleteOperationOptions,
) *CompleteOperationParams {
	if options == nil {
		options = &yt.CompleteOperationOptions{}
	}
	return &CompleteOperationParams{
		Verb("complete_operation"),
		opID,
		options,
	}
}

func (p *CompleteOperationParams) HTTPVerb() Verb {
	return p.verb
}
func (p *CompleteOperationParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *CompleteOperationParams) Log() []log.Field {
	return []log.Field{
		log.Any("opID", p.opID),
	}
}

func (p *CompleteOperationParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("operation_id")
	w.Any(p.opID)
	writeCompleteOperationOptions(w, p.options)
}

type UpdateOperationParametersParams struct {
	verb    Verb
	opID    yt.OperationID
	params  interface{}
	options *yt.UpdateOperationParametersOptions
}

func NewUpdateOperationParametersParams(
	opID yt.OperationID,
	params interface{},
	options *yt.UpdateOperationParametersOptions,
) *UpdateOperationParametersParams {
	if options == nil {
		options = &yt.UpdateOperationParametersOptions{}
	}
	return &UpdateOperationParametersParams{
		Verb("update_operation_parameters"),
		opID,
		params,
		options,
	}
}

func (p *UpdateOperationParametersParams) HTTPVerb() Verb {
	return p.verb
}
func (p *UpdateOperationParametersParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *UpdateOperationParametersParams) Log() []log.Field {
	return []log.Field{
		log.Any("opID", p.opID),
		log.Any("params", p.params),
	}
}

func (p *UpdateOperationParametersParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("operation_id")
	w.Any(p.opID)
	w.MapKeyString("parameters")
	w.Any(p.params)
	writeUpdateOperationParametersOptions(w, p.options)
}

type GetOperationParams struct {
	verb    Verb
	opID    yt.OperationID
	options *yt.GetOperationOptions
}

func NewGetOperationParams(
	opID yt.OperationID,
	options *yt.GetOperationOptions,
) *GetOperationParams {
	if options == nil {
		options = &yt.GetOperationOptions{}
	}
	return &GetOperationParams{
		Verb("get_operation"),
		opID,
		options,
	}
}

func (p *GetOperationParams) HTTPVerb() Verb {
	return p.verb
}
func (p *GetOperationParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *GetOperationParams) Log() []log.Field {
	return []log.Field{
		log.Any("opID", p.opID),
	}
}

func (p *GetOperationParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("operation_id")
	w.Any(p.opID)
	writeGetOperationOptions(w, p.options)
}

func (p *GetOperationParams) MasterReadOptions() **yt.MasterReadOptions {
	return &p.options.MasterReadOptions
}

func (p *GetOperationParams) ReadRetryOptions() **yt.ReadRetryOptions {
	return &p.options.ReadRetryOptions
}

type ListOperationsParams struct {
	verb    Verb
	options *yt.ListOperationsOptions
}

func NewListOperationsParams(
	options *yt.ListOperationsOptions,
) *ListOperationsParams {
	if options == nil {
		options = &yt.ListOperationsOptions{}
	}
	return &ListOperationsParams{
		Verb("list_operations"),
		options,
	}
}

func (p *ListOperationsParams) HTTPVerb() Verb {
	return p.verb
}
func (p *ListOperationsParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *ListOperationsParams) Log() []log.Field {
	return []log.Field{}
}

func (p *ListOperationsParams) MarshalHTTP(w *yson.Writer) {
	writeListOperationsOptions(w, p.options)
}

func (p *ListOperationsParams) MasterReadOptions() **yt.MasterReadOptions {
	return &p.options.MasterReadOptions
}

func (p *ListOperationsParams) ReadRetryOptions() **yt.ReadRetryOptions {
	return &p.options.ReadRetryOptions
}

type ListJobsParams struct {
	verb    Verb
	opID    yt.OperationID
	options *yt.ListJobsOptions
}

func NewListJobsParams(
	opID yt.OperationID,
	options *yt.ListJobsOptions,
) *ListJobsParams {
	if options == nil {
		options = &yt.ListJobsOptions{}
	}
	return &ListJobsParams{
		Verb("list_jobs"),
		opID,
		options,
	}
}

func (p *ListJobsParams) HTTPVerb() Verb {
	return p.verb
}
func (p *ListJobsParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *ListJobsParams) Log() []log.Field {
	return []log.Field{
		log.Any("opID", p.opID),
	}
}

func (p *ListJobsParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("operation_id")
	w.Any(p.opID)
	writeListJobsOptions(w, p.options)
}

type GetJobStderrParams struct {
	verb    Verb
	opID    yt.OperationID
	jobID   yt.JobID
	options *yt.GetJobStderrOptions
}

func NewGetJobStderrParams(
	opID yt.OperationID,
	jobID yt.JobID,
	options *yt.GetJobStderrOptions,
) *GetJobStderrParams {
	if options == nil {
		options = &yt.GetJobStderrOptions{}
	}
	return &GetJobStderrParams{
		Verb("get_job_stderr"),
		opID,
		jobID,
		options,
	}
}

func (p *GetJobStderrParams) HTTPVerb() Verb {
	return p.verb
}
func (p *GetJobStderrParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *GetJobStderrParams) Log() []log.Field {
	return []log.Field{
		log.Any("opID", p.opID),
		log.Any("jobID", p.jobID),
	}
}

func (p *GetJobStderrParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("operation_id")
	w.Any(p.opID)
	w.MapKeyString("job_id")
	w.Any(p.jobID)
	writeGetJobStderrOptions(w, p.options)
}

type AddMemberParams struct {
	verb    Verb
	group   string
	member  string
	options *yt.AddMemberOptions
}

func NewAddMemberParams(
	group string,
	member string,
	options *yt.AddMemberOptions,
) *AddMemberParams {
	if options == nil {
		options = &yt.AddMemberOptions{}
	}
	return &AddMemberParams{
		Verb("add_member"),
		group,
		member,
		options,
	}
}

func (p *AddMemberParams) HTTPVerb() Verb {
	return p.verb
}
func (p *AddMemberParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *AddMemberParams) Log() []log.Field {
	return []log.Field{
		log.Any("group", p.group),
		log.Any("member", p.member),
	}
}

func (p *AddMemberParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("group")
	w.Any(p.group)
	w.MapKeyString("member")
	w.Any(p.member)
	writeAddMemberOptions(w, p.options)
}

func (p *AddMemberParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

func (p *AddMemberParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

type RemoveMemberParams struct {
	verb    Verb
	group   string
	member  string
	options *yt.RemoveMemberOptions
}

func NewRemoveMemberParams(
	group string,
	member string,
	options *yt.RemoveMemberOptions,
) *RemoveMemberParams {
	if options == nil {
		options = &yt.RemoveMemberOptions{}
	}
	return &RemoveMemberParams{
		Verb("remove_member"),
		group,
		member,
		options,
	}
}

func (p *RemoveMemberParams) HTTPVerb() Verb {
	return p.verb
}
func (p *RemoveMemberParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *RemoveMemberParams) Log() []log.Field {
	return []log.Field{
		log.Any("group", p.group),
		log.Any("member", p.member),
	}
}

func (p *RemoveMemberParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("group")
	w.Any(p.group)
	w.MapKeyString("member")
	w.Any(p.member)
	writeRemoveMemberOptions(w, p.options)
}

func (p *RemoveMemberParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

func (p *RemoveMemberParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

type BuildMasterSnapshotsParams struct {
	verb Verb
	options *yt.BuildMasterSnapshotsOptions
}

func NewBuildMasterSnapshotsParams(
	options *yt.BuildMasterSnapshotsOptions,
) *BuildMasterSnapshotsParams {
	if options == nil {
		options = &yt.BuildMasterSnapshotsOptions{}
	}
	return &BuildMasterSnapshotsParams{
		VerbBuildMasterSnapshots,
		options,
	}
}

func (p* BuildMasterSnapshotsParams) HTTPVerb() Verb {
	return p.verb
}

func (p *BuildMasterSnapshotsParams) YPath() (ypath.YPath, bool) {
	return nil, false
}

func (p *BuildMasterSnapshotsParams) Log() []log.Field {
	return []log.Field{}
}

func (p *BuildMasterSnapshotsParams) MarshalHTTP(w *yson.Writer) {
	writeBuildMasterSnapshots(w, p.options)
}


type DisableChunkLocationsParams struct {
	verb          Verb
	nodeAddress   string
	locationUuids []guid.GUID
}

func NewDisableChunkLocationsParams(
	nodeAddress string,
	locationUuids []guid.GUID,
) *DisableChunkLocationsParams {
	return &DisableChunkLocationsParams{
		Verb("disable_chunk_locations"),
		nodeAddress,
		locationUuids,
	}
}

func (p *DisableChunkLocationsParams) HTTPVerb() Verb {
	return p.verb
}
func (p *DisableChunkLocationsParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *DisableChunkLocationsParams) Log() []log.Field {
	return []log.Field{
		log.Any("nodeAddress", p.nodeAddress),
		log.Any("locationUuids", p.locationUuids),
	}
}

func (p *DisableChunkLocationsParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("node_address")
	w.Any(p.nodeAddress)
	w.MapKeyString("location_uuids")
	w.Any(p.locationUuids)
}

type DestroyChunkLocationsParams struct {
	verb          Verb
	nodeAddress   string
	locationUuids []guid.GUID
}

func NewDestroyChunkLocationsParams(
	nodeAddress string,
	locationUuids []guid.GUID,
) *DestroyChunkLocationsParams {
	return &DestroyChunkLocationsParams{
		Verb("disable_chunk_locations"),
		nodeAddress,
		locationUuids,
	}
}

func (p *DestroyChunkLocationsParams) HTTPVerb() Verb {
	return p.verb
}
func (p *DestroyChunkLocationsParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *DestroyChunkLocationsParams) Log() []log.Field {
	return []log.Field{
		log.Any("nodeAddress", p.nodeAddress),
		log.Any("locationUuids", p.locationUuids),
	}
}

func (p *DestroyChunkLocationsParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("node_address")
	w.Any(p.nodeAddress)
	w.MapKeyString("location_uuids")
	w.Any(p.locationUuids)
}

type ResurrectChunkLocationsParams struct {
	verb          Verb
	nodeAddress   string
	locationUuids []guid.GUID
}

func NewResurrectChunkLocationsParams(
	nodeAddress string,
	locationUuids []guid.GUID,
) *ResurrectChunkLocationsParams {
	return &ResurrectChunkLocationsParams{
		Verb("disable_chunk_locations"),
		nodeAddress,
		locationUuids,
	}
}

func (p *ResurrectChunkLocationsParams) HTTPVerb() Verb {
	return p.verb
}
func (p *ResurrectChunkLocationsParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *ResurrectChunkLocationsParams) Log() []log.Field {
	return []log.Field{
		log.Any("nodeAddress", p.nodeAddress),
		log.Any("locationUuids", p.locationUuids),
	}
}

func (p *ResurrectChunkLocationsParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("node_address")
	w.Any(p.nodeAddress)
	w.MapKeyString("location_uuids")
	w.Any(p.locationUuids)
}

type TransferAccountResourcesParams struct {
	verb          Verb
	srcAccount    string
	dstAccount    string
	resourceDelta interface{}
	options       *yt.TransferAccountResourcesOptions
}

func NewTransferAccountResourcesParams(
	srcAccount string,
	dstAccount string,
	resourceDelta interface{},
	options *yt.TransferAccountResourcesOptions,
) *TransferAccountResourcesParams {
	if options == nil {
		options = &yt.TransferAccountResourcesOptions{}
	}
	return &TransferAccountResourcesParams{
		Verb("transfer_account_resources"),
		srcAccount,
		dstAccount,
		resourceDelta,
		options,
	}
}

func (p *TransferAccountResourcesParams) HTTPVerb() Verb {
	return p.verb
}
func (p *TransferAccountResourcesParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *TransferAccountResourcesParams) Log() []log.Field {
	return []log.Field{
		log.Any("srcAccount", p.srcAccount),
		log.Any("dstAccount", p.dstAccount),
		log.Any("resourceDelta", p.resourceDelta),
	}
}

func (p *TransferAccountResourcesParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("source_account")
	w.Any(p.srcAccount)
	w.MapKeyString("destination_account")
	w.Any(p.dstAccount)
	w.MapKeyString("resource_delta")
	w.Any(p.resourceDelta)
	writeTransferAccountResourcesOptions(w, p.options)
}

func (p *TransferAccountResourcesParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

type TransferPoolResourcesParams struct {
	verb          Verb
	srcPool       string
	dstPool       string
	poolTree      string
	resourceDelta interface{}
	options       *yt.TransferPoolResourcesOptions
}

func NewTransferPoolResourcesParams(
	srcPool string,
	dstPool string,
	poolTree string,
	resourceDelta interface{},
	options *yt.TransferPoolResourcesOptions,
) *TransferPoolResourcesParams {
	if options == nil {
		options = &yt.TransferPoolResourcesOptions{}
	}
	return &TransferPoolResourcesParams{
		Verb("transfer_pool_resources"),
		srcPool,
		dstPool,
		poolTree,
		resourceDelta,
		options,
	}
}

func (p *TransferPoolResourcesParams) HTTPVerb() Verb {
	return p.verb
}
func (p *TransferPoolResourcesParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *TransferPoolResourcesParams) Log() []log.Field {
	return []log.Field{
		log.Any("srcPool", p.srcPool),
		log.Any("dstPool", p.dstPool),
		log.Any("poolTree", p.poolTree),
		log.Any("resourceDelta", p.resourceDelta),
	}
}

func (p *TransferPoolResourcesParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("source_pool")
	w.Any(p.srcPool)
	w.MapKeyString("destination_pool")
	w.Any(p.dstPool)
	w.MapKeyString("pool_tree")
	w.Any(p.poolTree)
	w.MapKeyString("resource_delta")
	w.Any(p.resourceDelta)
	writeTransferPoolResourcesOptions(w, p.options)
}

func (p *TransferPoolResourcesParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

type CheckPermissionParams struct {
	verb       Verb
	user       string
	permission yt.Permission
	path       ypath.YPath
	options    *yt.CheckPermissionOptions
}

func NewCheckPermissionParams(
	user string,
	permission yt.Permission,
	path ypath.YPath,
	options *yt.CheckPermissionOptions,
) *CheckPermissionParams {
	if options == nil {
		options = &yt.CheckPermissionOptions{}
	}
	return &CheckPermissionParams{
		Verb("check_permission"),
		user,
		permission,
		path,
		options,
	}
}

func (p *CheckPermissionParams) HTTPVerb() Verb {
	return p.verb
}
func (p *CheckPermissionParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *CheckPermissionParams) Log() []log.Field {
	return []log.Field{
		log.Any("user", p.user),
		log.Any("permission", p.permission),
		log.Any("path", p.path),
	}
}

func (p *CheckPermissionParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("user")
	w.Any(p.user)
	w.MapKeyString("permission")
	w.Any(p.permission)
	w.MapKeyString("path")
	w.Any(p.path)
	writeCheckPermissionOptions(w, p.options)
}

func (p *CheckPermissionParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *CheckPermissionParams) PrerequisiteOptions() **yt.PrerequisiteOptions {
	return &p.options.PrerequisiteOptions
}

func (p *CheckPermissionParams) MasterReadOptions() **yt.MasterReadOptions {
	return &p.options.MasterReadOptions
}

type LockNodeParams struct {
	verb    Verb
	path    ypath.YPath
	mode    yt.LockMode
	options *yt.LockNodeOptions
}

func NewLockNodeParams(
	path ypath.YPath,
	mode yt.LockMode,
	options *yt.LockNodeOptions,
) *LockNodeParams {
	if options == nil {
		options = &yt.LockNodeOptions{}
	}
	return &LockNodeParams{
		Verb("lock"),
		path,
		mode,
		options,
	}
}

func (p *LockNodeParams) HTTPVerb() Verb {
	return p.verb
}
func (p *LockNodeParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *LockNodeParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
		log.Any("mode", p.mode),
	}
}

func (p *LockNodeParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	w.MapKeyString("mode")
	w.Any(p.mode)
	writeLockNodeOptions(w, p.options)
}

func (p *LockNodeParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *LockNodeParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

type UnlockNodeParams struct {
	verb    Verb
	path    ypath.YPath
	options *yt.UnlockNodeOptions
}

func NewUnlockNodeParams(
	path ypath.YPath,
	options *yt.UnlockNodeOptions,
) *UnlockNodeParams {
	if options == nil {
		options = &yt.UnlockNodeOptions{}
	}
	return &UnlockNodeParams{
		Verb("unlock"),
		path,
		options,
	}
}

func (p *UnlockNodeParams) HTTPVerb() Verb {
	return p.verb
}
func (p *UnlockNodeParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *UnlockNodeParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *UnlockNodeParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeUnlockNodeOptions(w, p.options)
}

func (p *UnlockNodeParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *UnlockNodeParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

type SelectRowsParams struct {
	verb    Verb
	query   string
	options *yt.SelectRowsOptions
}

func NewSelectRowsParams(
	query string,
	options *yt.SelectRowsOptions,
) *SelectRowsParams {
	if options == nil {
		options = &yt.SelectRowsOptions{}
	}
	return &SelectRowsParams{
		Verb("select_rows"),
		query,
		options,
	}
}

func (p *SelectRowsParams) HTTPVerb() Verb {
	return p.verb
}
func (p *SelectRowsParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *SelectRowsParams) Log() []log.Field {
	return []log.Field{
		log.Any("query", p.query),
	}
}

func (p *SelectRowsParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("query")
	w.Any(p.query)
	writeSelectRowsOptions(w, p.options)
}

func (p *SelectRowsParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

func (p *SelectRowsParams) TimeoutOptions() **yt.TimeoutOptions {
	return &p.options.TimeoutOptions
}

type LookupRowsParams struct {
	verb    Verb
	path    ypath.Path
	options *yt.LookupRowsOptions
}

func NewLookupRowsParams(
	path ypath.Path,
	options *yt.LookupRowsOptions,
) *LookupRowsParams {
	if options == nil {
		options = &yt.LookupRowsOptions{}
	}
	return &LookupRowsParams{
		Verb("lookup_rows"),
		path,
		options,
	}
}

func (p *LookupRowsParams) HTTPVerb() Verb {
	return p.verb
}
func (p *LookupRowsParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *LookupRowsParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *LookupRowsParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeLookupRowsOptions(w, p.options)
}

func (p *LookupRowsParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

type LockRowsParams struct {
	verb     Verb
	path     ypath.Path
	locks    []string
	lockType yt.LockType
	options  *yt.LockRowsOptions
}

func NewLockRowsParams(
	path ypath.Path,
	locks []string,
	lockType yt.LockType,
	options *yt.LockRowsOptions,
) *LockRowsParams {
	if options == nil {
		options = &yt.LockRowsOptions{}
	}
	return &LockRowsParams{
		Verb("lock_rows"),
		path,
		locks,
		lockType,
		options,
	}
}

func (p *LockRowsParams) HTTPVerb() Verb {
	return p.verb
}
func (p *LockRowsParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *LockRowsParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
		log.Any("locks", p.locks),
		log.Any("lockType", p.lockType),
	}
}

func (p *LockRowsParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	w.MapKeyString("locks")
	w.Any(p.locks)
	w.MapKeyString("lock_type")
	w.Any(p.lockType)
	writeLockRowsOptions(w, p.options)
}

func (p *LockRowsParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

type InsertRowsParams struct {
	verb    Verb
	path    ypath.Path
	options *yt.InsertRowsOptions
}

func NewInsertRowsParams(
	path ypath.Path,
	options *yt.InsertRowsOptions,
) *InsertRowsParams {
	if options == nil {
		options = &yt.InsertRowsOptions{}
	}
	return &InsertRowsParams{
		Verb("insert_rows"),
		path,
		options,
	}
}

func (p *InsertRowsParams) HTTPVerb() Verb {
	return p.verb
}
func (p *InsertRowsParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *InsertRowsParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *InsertRowsParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeInsertRowsOptions(w, p.options)
}

func (p *InsertRowsParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

type DeleteRowsParams struct {
	verb    Verb
	path    ypath.Path
	options *yt.DeleteRowsOptions
}

func NewDeleteRowsParams(
	path ypath.Path,
	options *yt.DeleteRowsOptions,
) *DeleteRowsParams {
	if options == nil {
		options = &yt.DeleteRowsOptions{}
	}
	return &DeleteRowsParams{
		Verb("delete_rows"),
		path,
		options,
	}
}

func (p *DeleteRowsParams) HTTPVerb() Verb {
	return p.verb
}
func (p *DeleteRowsParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *DeleteRowsParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *DeleteRowsParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeDeleteRowsOptions(w, p.options)
}

func (p *DeleteRowsParams) TransactionOptions() **yt.TransactionOptions {
	return &p.options.TransactionOptions
}

type MountTableParams struct {
	verb    Verb
	path    ypath.Path
	options *yt.MountTableOptions
}

func NewMountTableParams(
	path ypath.Path,
	options *yt.MountTableOptions,
) *MountTableParams {
	if options == nil {
		options = &yt.MountTableOptions{}
	}
	return &MountTableParams{
		Verb("mount_table"),
		path,
		options,
	}
}

func (p *MountTableParams) HTTPVerb() Verb {
	return p.verb
}
func (p *MountTableParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *MountTableParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *MountTableParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeMountTableOptions(w, p.options)
}

func (p *MountTableParams) TabletRangeOptions() **yt.TabletRangeOptions {
	return &p.options.TabletRangeOptions
}

func (p *MountTableParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

type UnmountTableParams struct {
	verb    Verb
	path    ypath.Path
	options *yt.UnmountTableOptions
}

func NewUnmountTableParams(
	path ypath.Path,
	options *yt.UnmountTableOptions,
) *UnmountTableParams {
	if options == nil {
		options = &yt.UnmountTableOptions{}
	}
	return &UnmountTableParams{
		Verb("unmount_table"),
		path,
		options,
	}
}

func (p *UnmountTableParams) HTTPVerb() Verb {
	return p.verb
}
func (p *UnmountTableParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *UnmountTableParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *UnmountTableParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeUnmountTableOptions(w, p.options)
}

func (p *UnmountTableParams) TabletRangeOptions() **yt.TabletRangeOptions {
	return &p.options.TabletRangeOptions
}

func (p *UnmountTableParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

type RemountTableParams struct {
	verb    Verb
	path    ypath.Path
	options *yt.RemountTableOptions
}

func NewRemountTableParams(
	path ypath.Path,
	options *yt.RemountTableOptions,
) *RemountTableParams {
	if options == nil {
		options = &yt.RemountTableOptions{}
	}
	return &RemountTableParams{
		Verb("remount_table"),
		path,
		options,
	}
}

func (p *RemountTableParams) HTTPVerb() Verb {
	return p.verb
}
func (p *RemountTableParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *RemountTableParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *RemountTableParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeRemountTableOptions(w, p.options)
}

func (p *RemountTableParams) TabletRangeOptions() **yt.TabletRangeOptions {
	return &p.options.TabletRangeOptions
}

func (p *RemountTableParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

type ReshardTableParams struct {
	verb    Verb
	path    ypath.Path
	options *yt.ReshardTableOptions
}

func NewReshardTableParams(
	path ypath.Path,
	options *yt.ReshardTableOptions,
) *ReshardTableParams {
	if options == nil {
		options = &yt.ReshardTableOptions{}
	}
	return &ReshardTableParams{
		Verb("reshard_table"),
		path,
		options,
	}
}

func (p *ReshardTableParams) HTTPVerb() Verb {
	return p.verb
}
func (p *ReshardTableParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *ReshardTableParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *ReshardTableParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeReshardTableOptions(w, p.options)
}

func (p *ReshardTableParams) TabletRangeOptions() **yt.TabletRangeOptions {
	return &p.options.TabletRangeOptions
}

func (p *ReshardTableParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

type AlterTableParams struct {
	verb    Verb
	path    ypath.Path
	options *yt.AlterTableOptions
}

func NewAlterTableParams(
	path ypath.Path,
	options *yt.AlterTableOptions,
) *AlterTableParams {
	if options == nil {
		options = &yt.AlterTableOptions{}
	}
	return &AlterTableParams{
		Verb("alter_table"),
		path,
		options,
	}
}

func (p *AlterTableParams) HTTPVerb() Verb {
	return p.verb
}
func (p *AlterTableParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *AlterTableParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *AlterTableParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeAlterTableOptions(w, p.options)
}

func (p *AlterTableParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

type FreezeTableParams struct {
	verb    Verb
	path    ypath.Path
	options *yt.FreezeTableOptions
}

func NewFreezeTableParams(
	path ypath.Path,
	options *yt.FreezeTableOptions,
) *FreezeTableParams {
	if options == nil {
		options = &yt.FreezeTableOptions{}
	}
	return &FreezeTableParams{
		Verb("freeze_table"),
		path,
		options,
	}
}

func (p *FreezeTableParams) HTTPVerb() Verb {
	return p.verb
}
func (p *FreezeTableParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *FreezeTableParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *FreezeTableParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeFreezeTableOptions(w, p.options)
}

func (p *FreezeTableParams) TabletRangeOptions() **yt.TabletRangeOptions {
	return &p.options.TabletRangeOptions
}

func (p *FreezeTableParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

type UnfreezeTableParams struct {
	verb    Verb
	path    ypath.Path
	options *yt.UnfreezeTableOptions
}

func NewUnfreezeTableParams(
	path ypath.Path,
	options *yt.UnfreezeTableOptions,
) *UnfreezeTableParams {
	if options == nil {
		options = &yt.UnfreezeTableOptions{}
	}
	return &UnfreezeTableParams{
		Verb("unfreeze_table"),
		path,
		options,
	}
}

func (p *UnfreezeTableParams) HTTPVerb() Verb {
	return p.verb
}
func (p *UnfreezeTableParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *UnfreezeTableParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *UnfreezeTableParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeUnfreezeTableOptions(w, p.options)
}

func (p *UnfreezeTableParams) TabletRangeOptions() **yt.TabletRangeOptions {
	return &p.options.TabletRangeOptions
}

func (p *UnfreezeTableParams) MutatingOptions() **yt.MutatingOptions {
	return &p.options.MutatingOptions
}

type AlterTableReplicaParams struct {
	verb    Verb
	id      yt.NodeID
	options *yt.AlterTableReplicaOptions
}

func NewAlterTableReplicaParams(
	id yt.NodeID,
	options *yt.AlterTableReplicaOptions,
) *AlterTableReplicaParams {
	if options == nil {
		options = &yt.AlterTableReplicaOptions{}
	}
	return &AlterTableReplicaParams{
		Verb("alter_table_replica"),
		id,
		options,
	}
}

func (p *AlterTableReplicaParams) HTTPVerb() Verb {
	return p.verb
}
func (p *AlterTableReplicaParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *AlterTableReplicaParams) Log() []log.Field {
	return []log.Field{
		log.Any("id", p.id),
	}
}

func (p *AlterTableReplicaParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("replica_id")
	w.Any(p.id)
	writeAlterTableReplicaOptions(w, p.options)
}

type GenerateTimestampParams struct {
	verb    Verb
	options *yt.GenerateTimestampOptions
}

func NewGenerateTimestampParams(
	options *yt.GenerateTimestampOptions,
) *GenerateTimestampParams {
	if options == nil {
		options = &yt.GenerateTimestampOptions{}
	}
	return &GenerateTimestampParams{
		Verb("generate_timestamp"),
		options,
	}
}

func (p *GenerateTimestampParams) HTTPVerb() Verb {
	return p.verb
}
func (p *GenerateTimestampParams) YPath() (ypath.YPath, bool) {
	return nil, false
}
func (p *GenerateTimestampParams) Log() []log.Field {
	return []log.Field{}
}

func (p *GenerateTimestampParams) MarshalHTTP(w *yson.Writer) {
	writeGenerateTimestampOptions(w, p.options)
}

type LocateSkynetShareParams struct {
	verb    Verb
	path    ypath.YPath
	options *yt.LocateSkynetShareOptions
}

func NewLocateSkynetShareParams(
	path ypath.YPath,
	options *yt.LocateSkynetShareOptions,
) *LocateSkynetShareParams {
	if options == nil {
		options = &yt.LocateSkynetShareOptions{}
	}
	return &LocateSkynetShareParams{
		Verb("locate_skynet_share"),
		path,
		options,
	}
}

func (p *LocateSkynetShareParams) HTTPVerb() Verb {
	return p.verb
}
func (p *LocateSkynetShareParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *LocateSkynetShareParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
	}
}

func (p *LocateSkynetShareParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	writeLocateSkynetShareOptions(w, p.options)
}

type GetInSyncReplicasParams struct {
	verb    Verb
	path    ypath.Path
	ts      yt.Timestamp
	options *yt.GetInSyncReplicasOptions
}

func NewGetInSyncReplicasParams(
	path ypath.Path,
	ts yt.Timestamp,
	options *yt.GetInSyncReplicasOptions,
) *GetInSyncReplicasParams {
	if options == nil {
		options = &yt.GetInSyncReplicasOptions{}
	}
	return &GetInSyncReplicasParams{
		Verb("get_in_sync_replicas"),
		path,
		ts,
		options,
	}
}

func (p *GetInSyncReplicasParams) HTTPVerb() Verb {
	return p.verb
}
func (p *GetInSyncReplicasParams) YPath() (ypath.YPath, bool) {
	return p.path, true
}
func (p *GetInSyncReplicasParams) Log() []log.Field {
	return []log.Field{
		log.Any("path", p.path),
		log.Any("ts", p.ts),
	}
}

func (p *GetInSyncReplicasParams) MarshalHTTP(w *yson.Writer) {
	w.MapKeyString("path")
	w.Any(p.path)
	w.MapKeyString("timestamp")
	w.Any(p.ts)
	writeGetInSyncReplicasOptions(w, p.options)
}
