// Package crc64 implements crc64 checksum with parameters used by YT C++ code.
package crc64

import (
	"encoding/binary"
	"hash"
	"hash/crc64"
	"math/bits"
)

func New() hash.Hash64 {
	return &digest{}
}

var table = crc64.Table{
	0x0000000000000000, 0x81789265972743e5, 0x8389b6aeb968c52f, 0x02f124cb2e4f86ca,
	0x06136d5d73d18a5f, 0x876bff38e4f6c9ba, 0x859adbf3cab94f70, 0x04e249965d9e0c95,
	0x0c26dabae6a215bf, 0x8d5e48df7185565a, 0x8faf6c145fcad090, 0x0ed7fe71c8ed9375,
	0x0a35b7e795739fe0, 0x8b4d25820254dc05, 0x89bc01492c1b5acf, 0x08c4932cbb3c192a,
	0x993426105a62689b, 0x184cb475cd452b7e, 0x1abd90bee30aadb4, 0x9bc502db742dee51,
	0x9f274b4d29b3e2c4, 0x1e5fd928be94a121, 0x1caefde390db27eb, 0x9dd66f8607fc640e,
	0x9512fcaabcc07d24, 0x146a6ecf2be73ec1, 0x169b4a0405a8b80b, 0x97e3d861928ffbee,
	0x930191f7cf11f77b, 0x127903925836b49e, 0x1088275976793254, 0x91f0b53ce15e71b1,
	0xb311de4523e393d3, 0x32694c20b4c4d036, 0x309868eb9a8b56fc, 0xb1e0fa8e0dac1519,
	0xb502b3185032198c, 0x347a217dc7155a69, 0x368b05b6e95adca3, 0xb7f397d37e7d9f46,
	0xbf3704ffc541866c, 0x3e4f969a5266c589, 0x3cbeb2517c294343, 0xbdc62034eb0e00a6,
	0xb92469a2b6900c33, 0x385cfbc721b74fd6, 0x3aaddf0c0ff8c91c, 0xbbd54d6998df8af9,
	0x2a25f8557981fb48, 0xab5d6a30eea6b8ad, 0xa9ac4efbc0e93e67, 0x28d4dc9e57ce7d82,
	0x2c3695080a507117, 0xad4e076d9d7732f2, 0xafbf23a6b338b438, 0x2ec7b1c3241ff7dd,
	0x260322ef9f23eef7, 0xa77bb08a0804ad12, 0xa58a9441264b2bd8, 0x24f20624b16c683d,
	0x20104fb2ecf264a8, 0xa168ddd77bd5274d, 0xa399f91c559aa187, 0x22e16b79c2bde262,
	0xe75b2eeed1e16442, 0x6623bc8b46c627a7, 0x64d298406889a16d, 0xe5aa0a25ffaee288,
	0xe14843b3a230ee1d, 0x6030d1d63517adf8, 0x62c1f51d1b582b32, 0xe3b967788c7f68d7,
	0xeb7df454374371fd, 0x6a056631a0643218, 0x68f442fa8e2bb4d2, 0xe98cd09f190cf737,
	0xed6e99094492fba2, 0x6c160b6cd3b5b847, 0x6ee72fa7fdfa3e8d, 0xef9fbdc26add7d68,
	0x7e6f08fe8b830cd9, 0xff179a9b1ca44f3c, 0xfde6be5032ebc9f6, 0x7c9e2c35a5cc8a13,
	0x787c65a3f8528686, 0xf904f7c66f75c563, 0xfbf5d30d413a43a9, 0x7a8d4168d61d004c,
	0x7249d2446d211966, 0xf3314021fa065a83, 0xf1c064ead449dc49, 0x70b8f68f436e9fac,
	0x745abf191ef09339, 0xf5222d7c89d7d0dc, 0xf7d309b7a7985616, 0x76ab9bd230bf15f3,
	0x544af0abf202f791, 0xd53262ce6525b474, 0xd7c346054b6a32be, 0x56bbd460dc4d715b,
	0x52599df681d37dce, 0xd3210f9316f43e2b, 0xd1d02b5838bbb8e1, 0x50a8b93daf9cfb04,
	0x586c2a1114a0e22e, 0xd914b8748387a1cb, 0xdbe59cbfadc82701, 0x5a9d0eda3aef64e4,
	0x5e7f474c67716871, 0xdf07d529f0562b94, 0xddf6f1e2de19ad5e, 0x5c8e6387493eeebb,
	0xcd7ed6bba8609f0a, 0x4c0644de3f47dcef, 0x4ef7601511085a25, 0xcf8ff270862f19c0,
	0xcb6dbbe6dbb11555, 0x4a1529834c9656b0, 0x48e40d4862d9d07a, 0xc99c9f2df5fe939f,
	0xc1580c014ec28ab5, 0x40209e64d9e5c950, 0x42d1baaff7aa4f9a, 0xc3a928ca608d0c7f,
	0xc74b615c3d1300ea, 0x4633f339aa34430f, 0x44c2d7f2847bc5c5, 0xc5ba4597135c8620,
	0xceb75cdca3c3c984, 0x4fcfceb934e48a61, 0x4d3eea721aab0cab, 0xcc4678178d8c4f4e,
	0xc8a43181d01243db, 0x49dca3e44735003e, 0x4b2d872f697a86f4, 0xca55154afe5dc511,
	0xc29186664561dc3b, 0x43e91403d2469fde, 0x411830c8fc091914, 0xc060a2ad6b2e5af1,
	0xc482eb3b36b05664, 0x45fa795ea1971581, 0x470b5d958fd8934b, 0xc673cff018ffd0ae,
	0x57837accf9a1a11f, 0xd6fbe8a96e86e2fa, 0xd40acc6240c96430, 0x55725e07d7ee27d5,
	0x519017918a702b40, 0xd0e885f41d5768a5, 0xd219a13f3318ee6f, 0x5361335aa43fad8a,
	0x5ba5a0761f03b4a0, 0xdadd32138824f745, 0xd82c16d8a66b718f, 0x595484bd314c326a,
	0x5db6cd2b6cd23eff, 0xdcce5f4efbf57d1a, 0xde3f7b85d5bafbd0, 0x5f47e9e0429db835,
	0x7da6829980205a57, 0xfcde10fc170719b2, 0xfe2f343739489f78, 0x7f57a652ae6fdc9d,
	0x7bb5efc4f3f1d008, 0xfacd7da164d693ed, 0xf83c596a4a991527, 0x7944cb0fddbe56c2,
	0x7180582366824fe8, 0xf0f8ca46f1a50c0d, 0xf209ee8ddfea8ac7, 0x73717ce848cdc922,
	0x7793357e1553c5b7, 0xf6eba71b82748652, 0xf41a83d0ac3b0098, 0x756211b53b1c437d,
	0xe492a489da4232cc, 0x65ea36ec4d657129, 0x671b1227632af7e3, 0xe6638042f40db406,
	0xe281c9d4a993b893, 0x63f95bb13eb4fb76, 0x61087f7a10fb7dbc, 0xe070ed1f87dc3e59,
	0xe8b47e333ce02773, 0x69ccec56abc76496, 0x6b3dc89d8588e25c, 0xea455af812afa1b9,
	0xeea7136e4f31ad2c, 0x6fdf810bd816eec9, 0x6d2ea5c0f6596803, 0xec5637a5617e2be6,
	0x29ec72327222adc6, 0xa894e057e505ee23, 0xaa65c49ccb4a68e9, 0x2b1d56f95c6d2b0c,
	0x2fff1f6f01f32799, 0xae878d0a96d4647c, 0xac76a9c1b89be2b6, 0x2d0e3ba42fbca153,
	0x25caa8889480b879, 0xa4b23aed03a7fb9c, 0xa6431e262de87d56, 0x273b8c43bacf3eb3,
	0x23d9c5d5e7513226, 0xa2a157b0707671c3, 0xa050737b5e39f709, 0x2128e11ec91eb4ec,
	0xb0d854222840c55d, 0x31a0c647bf6786b8, 0x3351e28c91280072, 0xb22970e9060f4397,
	0xb6cb397f5b914f02, 0x37b3ab1accb60ce7, 0x35428fd1e2f98a2d, 0xb43a1db475dec9c8,
	0xbcfe8e98cee2d0e2, 0x3d861cfd59c59307, 0x3f773836778a15cd, 0xbe0faa53e0ad5628,
	0xbaede3c5bd335abd, 0x3b9571a02a141958, 0x3964556b045b9f92, 0xb81cc70e937cdc77,
	0x9afdac7751c13e15, 0x1b853e12c6e67df0, 0x19741ad9e8a9fb3a, 0x980c88bc7f8eb8df,
	0x9ceec12a2210b44a, 0x1d96534fb537f7af, 0x1f6777849b787165, 0x9e1fe5e10c5f3280,
	0x96db76cdb7632baa, 0x17a3e4a82044684f, 0x1552c0630e0bee85, 0x942a5206992cad60,
	0x90c81b90c4b2a1f5, 0x11b089f55395e210, 0x1341ad3e7dda64da, 0x92393f5beafd273f,
	0x03c98a670ba3568e, 0x82b118029c84156b, 0x80403cc9b2cb93a1, 0x0138aeac25ecd044,
	0x05dae73a7872dcd1, 0x84a2755fef559f34, 0x86535194c11a19fe, 0x072bc3f1563d5a1b,
	0x0fef50dded014331, 0x8e97c2b87a2600d4, 0x8c66e6735469861e, 0x0d1e7416c34ec5fb,
	0x09fc3d809ed0c96e, 0x8884afe509f78a8b, 0x8a758b2e27b80c41, 0x0b0d194bb09f4fa4,
}

type digest struct {
	crc uint64
}

func (d *digest) update(p []byte) {
	d.crc = ^crc64.Update(^d.crc, &table, p)
}

func (d *digest) Write(p []byte) (n int, err error) {
	d.update(p)
	return len(p), nil
}

func (d *digest) Sum(b []byte) []byte {
	var res [8]byte
	binary.LittleEndian.PutUint64(res[:], d.Sum64())
	return append(b, res[:]...)
}

func (d *digest) Reset() {
	d.crc = 0
}

func (d *digest) Size() int {
	return 8
}

func (d *digest) BlockSize() int {
	return 1
}

func (d *digest) Sum64() uint64 {
	return bits.ReverseBytes64(d.crc)
}

func Checksum(p []byte) uint64 {
	var d digest
	d.update(p)
	return d.Sum64()
}
